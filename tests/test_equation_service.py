"""Test EquationService - Basic functionality test"""
import sys
import os

# Th√™m path ƒë·ªÉ import ƒë∆∞·ª£c services
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_equation_service_basic():
    """Test c∆° b·∫£n cho EquationService"""
    try:
        from services.equation.equation_service import EquationService
        print("‚úÖ Import EquationService th√†nh c√¥ng!")
        
        # Test kh·ªüi t·∫°o
        service = EquationService()
        print("‚úÖ Kh·ªüi t·∫°o EquationService th√†nh c√¥ng!")
        
        # Test h·ªá 2 ph∆∞∆°ng tr√¨nh 2 ·∫©n
        print("\n=== TEST H·ªÜ 2 PH∆Ø∆†NG TR√åNH 2 ·∫®N ===")
        service.set_variables_count(2)
        service.set_version("fx799")
        
        # V√≠ d·ª•: 2x + 3y = 7, x - y = 1
        equation_inputs = ["2,3,7", "1,-1,1"]
        
        # Test validation
        is_valid, msg = service.validate_input(equation_inputs)
        print(f"Validation: {is_valid} - {msg}")
        
        if is_valid:
            # X·ª≠ l√Ω ho√†n ch·ªânh
            success, status_msg, solutions_text, final_result = service.process_complete_workflow(equation_inputs)
            
            print(f"X·ª≠ l√Ω th√†nh c√¥ng: {success}")
            print(f"Status: {status_msg}")
            print(f"Nghi·ªám: {solutions_text}")
            print(f"K·∫øt qu·∫£ cu·ªëi: {final_result}")
            
            # Hi·ªÉn th·ªã encoded coefficients
            encoded = service.get_encoded_coefficients_display()
            print(f"Encoded coefficients: {encoded}")
            
            # Hi·ªÉn th·ªã ma tr·∫≠n info
            print("\nMatrix Info:")
            print(service.get_matrix_info())
        
        print("\n=== TEST H·ªÜ 3 PH∆Ø∆†NG TR√åNH 3 ·∫®N ===")
        service.set_variables_count(3)
        
        # V√≠ d·ª•: x + y + z = 6, 2x - y + z = 1, x + 2y - z = 2
        equation_inputs_3 = ["1,1,1,6", "2,-1,1,1", "1,2,-1,2"]
        
        is_valid, msg = service.validate_input(equation_inputs_3)
        print(f"Validation: {is_valid} - {msg}")
        
        if is_valid:
            success, status_msg, solutions_text, final_result = service.process_complete_workflow(equation_inputs_3)
            
            print(f"X·ª≠ l√Ω th√†nh c√¥ng: {success}")
            print(f"Status: {status_msg}")
            print(f"Nghi·ªám: {solutions_text}")
            print(f"K·∫øt qu·∫£ cu·ªëi: {final_result}")
        
        print("\n=== TEST BI·ªÇU TH·ª®C PH·ª®C T·∫†P ===")
        service.set_variables_count(2)
        
        # V√≠ d·ª• v·ªõi bi·ªÉu th·ª©c: sqrt(4)x + pi*y = 10, sin(pi/2)*x + cos(0)*y = 3
        equation_complex = ["sqrt(4),pi,10", "sin(pi/2),cos(0),3"]
        
        is_valid, msg = service.validate_input(equation_complex)
        print(f"Validation: {is_valid} - {msg}")
        
        if is_valid:
            success, status_msg, solutions_text, final_result = service.process_complete_workflow(equation_complex)
            
            print(f"X·ª≠ l√Ω th√†nh c√¥ng: {success}")
            print(f"Status: {status_msg}")
            print(f"Nghi·ªám: {solutions_text}")
            print(f"K·∫øt qu·∫£ cu·ªëi: {final_result}")
        
        print("\n‚úÖ T·∫•t c·∫£ test c∆° b·∫£n ƒë·ªÅu pass!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_equation_ui():
    """Test giao di·ªán Equation Mode"""
    try:
        print("\n=== TEST EQUATION UI ===")
        import tkinter as tk
        
        # Import equation view
        sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'views'))
        from equation_view import EquationView
        
        root = tk.Tk()
        
        # T·∫°o sample config
        sample_config = {
            'common': {
                'versions': {
                    'versions': ['fx799', 'fx800', 'fx801']
                }
            },
            'equation': {
                'encoding': {
                    'numbers': {
                        '0': '00', '1': '01', '2': '02', '3': '03', '4': '04',
                        '5': '05', '6': '06', '7': '07', '8': '08', '9': '09',
                        '-': 'FF', '.': 'FE'
                    },
                    'prefix': 'EQ'
                },
                'prefixes': {
                    'versions': {
                        'fx799': {'base_prefix': 'EQ799'},
                        'fx800': {'base_prefix': 'EQ800'},
                        'fx801': {'base_prefix': 'EQ801'}
                    }
                }
            }
        }
        
        app = EquationView(root, config=sample_config)
        print("‚úÖ T·∫°o EquationView th√†nh c√¥ng!")
        
        # Test c∆° b·∫£n - kh√¥ng ch·∫°y mainloop
        print("‚úÖ UI test c∆° b·∫£n pass!")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test UI: {e}")
        import traceback
        print(traceback.format_exc())
        return False

if __name__ == "__main__":
    print("üß™ Testing EquationService v2.0...")
    print("=" * 50)
    
    # Test service
    service_ok = test_equation_service_basic()
    
    # Test UI (optional - c√≥ th·ªÉ skip n·∫øu kh√¥ng c√≥ display)
    ui_ok = test_equation_ui()
    
    print("=" * 50)
    if service_ok and ui_ok:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu PASS! EquationService v2.0 s·∫µn s√†ng!")
    elif service_ok:
        print("‚úÖ Service tests PASS! UI c√≥ th·ªÉ c·∫ßn adjustment.")
    else:
        print("‚ùå C√≥ l·ªói trong qu√° tr√¨nh test. Vui l√≤ng ki·ªÉm tra l·∫°i.")