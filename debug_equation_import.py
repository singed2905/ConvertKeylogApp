"""Debug import errors trong EquationService"""
import sys
import os

# Add path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports_step_by_step():
    """Test import t·ª´ng b∆∞·ªõc ƒë·ªÉ t√¨m l·ªói"""
    print("üîç Debug Equation Service Imports")
    print("=" * 40)
    
    try:
        print("1. Testing basic imports...")
        import numpy as np
        print("   ‚úÖ numpy OK")
        
        import math
        print("   ‚úÖ math OK")
        
        from typing import List, Dict, Tuple, Optional, Any
        print("   ‚úÖ typing OK")
        
        print("\n2. Testing MappingManager...")
        from services.equation.mapping_manager import MappingManager
        mapper = MappingManager()
        print("   ‚úÖ MappingManager OK")
        
        print("\n3. Testing PrefixResolver...")
        from services.equation.prefix_resolver import EquationPrefixResolver
        resolver = EquationPrefixResolver()
        print("   ‚úÖ EquationPrefixResolver OK")
        
        print("\n4. Testing EquationEncodingService...")
        from services.equation.equation_encoding_service import EquationEncodingService
        encoding = EquationEncodingService()
        print("   ‚úÖ EquationEncodingService OK")
        
        print("\n5. Testing main EquationService...")
        from services.equation.equation_service import EquationService
        service = EquationService()
        print("   ‚úÖ EquationService OK")
        
        print("\n6. Testing basic functionality...")
        service.set_variables_count(2)
        service.set_version("fx799")
        
        # Simple test
        equations = ["2,3,7", "1,1,4"]
        success, status, solutions, final = service.process_complete_workflow(equations)
        
        print(f"   Processing: {'Success' if success else 'Failed'}")
        print(f"   Status: {status}")
        print(f"   Solutions: {solutions}")
        print(f"   Final result: {final}")
        
        if success:
            print("\n‚úÖ T·∫•t c·∫£ imports v√† basic functionality ƒë·ªÅu OK!")
        else:
            print("\n‚ö†Ô∏è Imports OK nh∆∞ng c√≥ l·ªói logic")
        
        return True
        
    except ImportError as e:
        print(f"\n‚ùå L·ªói import: {e}")
        print("\nüîß C·∫ßn ki·ªÉm tra:")
        print("   - ƒê∆∞·ªùng d·∫´n file c√≥ ƒë√∫ng kh√¥ng?")
        print("   - C√≥ file __init__.py trong c√°c folder kh√¥ng?")
        print("   - Syntax error trong c√°c file service?")
        return False
        
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√°c: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def check_file_structure():
    """Ki·ªÉm tra c·∫•u tr√∫c file"""
    print("\nüìÅ Checking file structure...")
    
    expected_files = [
        "services/__init__.py",
        "services/equation/__init__.py", 
        "services/equation/equation_service.py",
        "services/equation/mapping_manager.py",
        "services/equation/prefix_resolver.py",
        "services/equation/equation_encoding_service.py",
        "config/equation_mode/equation_config.json",
        "config/equation_mode/mapping.json",
        "config/equation_mode/equation_prefixes.json"
    ]
    
    for file_path in expected_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - MISSING!")

if __name__ == "__main__":
    print("üöÄ Debug Equation Service Imports")
    
    # Ki·ªÉm tra c·∫•u tr√∫c file tr∆∞·ªõc
    check_file_structure()
    
    # Test imports
    test_imports_step_by_step()