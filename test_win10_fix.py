"""Test fix cho Windows 10 + Python 3.12.0"""
import sys
import os
import shutil

# Add path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def clean_pycache_windows():
    """D·ªçn d·∫πp __pycache__ cho Windows"""
    print("üßΩ Cleaning __pycache__ folders on Windows...")
    
    # C√°c th∆∞ m·ª•c c·∫ßn clean
    cache_dirs = [
        "__pycache__",
        "services/__pycache__",
        "services/equation/__pycache__",
        "services/geometry/__pycache__",
        "services/excel/__pycache__",
        "views/__pycache__",
        "utils/__pycache__",
        "config/__pycache__"
    ]
    
    cleaned_count = 0
    for cache_dir in cache_dirs:
        if os.path.exists(cache_dir):
            try:
                shutil.rmtree(cache_dir)
                print(f"   ‚úÖ Cleaned: {cache_dir}")
                cleaned_count += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è Cannot clean {cache_dir}: {e}")
        else:
            print(f"   ‚ûñ Not found: {cache_dir}")
    
    print(f"\nüì¶ Cleaned {cleaned_count} cache directories")
    return cleaned_count

def test_python_312_compatibility():
    """Test t∆∞∆°ng th√≠ch Python 3.12"""
    print(f"\nüêç Python version: {sys.version}")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python qu√° c≈©! C·∫ßn Python 3.8+")
        return False
    
    if sys.version_info >= (3, 12):
        print("‚úÖ Python 3.12+ - S·ª≠ d·ª•ng typing modern")
    else:
        print("‚úÖ Python t∆∞∆°ng th√≠ch")
    
    return True

def test_imports_clean():
    """Test imports sau khi clean cache"""
    print("\nüóã Testing imports after cache clean...")
    
    try:
        print("1. Basic Python modules:")
        import numpy as np
        print("   ‚úÖ numpy")
        
        import math
        print("   ‚úÖ math")
        
        from typing import List, Dict, Tuple, Optional, Any
        print("   ‚úÖ typing (List, Dict, Tuple, Optional, Any)")
        
        print("\n2. EquationService components:")
        
        # Test MappingManager
        from services.equation.mapping_manager import MappingManager
        mapper = MappingManager()
        test_encode = mapper.encode_string("2")
        print(f"   ‚úÖ MappingManager - encode '2' -> '{test_encode}'")
        
        # Test PrefixResolver
        from services.equation.prefix_resolver import EquationPrefixResolver
        resolver = EquationPrefixResolver()
        test_prefix = resolver.get_equation_prefix("fx799", 2)
        print(f"   ‚úÖ EquationPrefixResolver - fx799, 2 an -> '{test_prefix}'")
        
        # Test EquationEncodingService
        from services.equation.equation_encoding_service import EquationEncodingService
        encoding_service = EquationEncodingService()
        print(f"   ‚úÖ EquationEncodingService - Available: {encoding_service.is_available()}")
        
        # Test main EquationService
        from services.equation.equation_service import EquationService
        service = EquationService()
        print(f"   ‚úÖ EquationService - TL encoding: {service.tl_encoding_available}")
        
        print("\n3. Full workflow test:")
        service.set_variables_count(2)
        service.set_version("fx799")
        
        # Test c∆° b·∫£n: 2x + 3y = 7, x - y = 1
        equations = ["2,3,7", "1,-1,1"]
        success, status, solutions, final = service.process_complete_workflow(equations)
        
        print(f"   Success: {success}")
        print(f"   Status: {status}")
        print(f"   Solutions: {solutions}")
        print(f"   Final keylog: {final}")
        
        # Ki·ªÉm tra prefix ƒë√∫ng
        expected_prefix = "w912"
        has_correct_prefix = final.startswith(expected_prefix) if final else False
        print(f"   Correct TL prefix: ‚úÖ" if has_correct_prefix else f"   Correct TL prefix: ‚ùå")
        
        if success and has_correct_prefix:
            print("\n‚úÖ T·∫•t c·∫£ imports v√† TL compatibility ƒë·ªÅu OK!")
            return True
        elif success:
            print("\n‚ö†Ô∏è Processing OK nh∆∞ng prefix c·∫ßn ki·ªÉm tra")
            return True
        else:
            print("\n‚ùå C√≥ l·ªói processing")
            return False
        
    except Exception as e:
        print(f"\n‚ùå L·ªói import/test: {e}")
        import traceback
        print("\nFull traceback:")
        print(traceback.format_exc())
        return False

def run_ui_test():
    """Test UI sau khi fix"""
    print("\nüñ•Ô∏è Testing UI integration...")
    
    try:
        import tkinter as tk
        from views.equation_view import EquationView
        
        print("   Creating test window...")
        root = tk.Tk()
        root.withdraw()  # ·∫®n window ƒë·ªÉ test
        
        # T·∫°o EquationView
        app = EquationView(root)
        
        # Ki·ªÉm tra service c√≥ kh·ªüi t·∫°o th√†nh c√¥ng kh√¥ng
        if hasattr(app, 'equation_service') and app.equation_service:
            print("   ‚úÖ EquationService kh·ªüi t·∫°o th√†nh c√¥ng trong UI!")
            success = True
        else:
            print("   ‚ùå EquationService v·∫´n ch∆∞a kh·ªüi t·∫°o trong UI")
            success = False
        
        root.destroy()
        return success
        
    except Exception as e:
        print(f"   ‚ùå L·ªói UI test: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Windows 10 + Python 3.12.0 Fix Test")
    print("" + "=" * 50)
    
    # Ki·ªÉm tra Python version
    if not test_python_312_compatibility():
        exit(1)
    
    # Clean cache
    clean_pycache_windows()
    
    # Test imports
    imports_ok = test_imports_clean()
    
    if imports_ok:
        # Test UI
        ui_ok = run_ui_test()
        
        print("\n" + "=" * 50)
        if ui_ok:
            print("üéâ HO√ÄN TH√ÄNH! Equation Mode s·∫µn s√†ng v·ªõi TL encoding!")
            print("\nüéØ Gi·ªù b·∫°n c√≥ th·ªÉ:")
            print("   1. Ch·∫°y: python main.py")
            print("   2. Ch·ªçn Equation Mode")
            print("   3. Nh·∫≠p: 2,3,7 v√† 1,-1,1")
            print("   4. B·∫•m 'üöÄ X·ª≠ l√Ω & Gi·∫£i nghi·ªám'")
            print("   5. Xem keylog b·∫Øt ƒë·∫ßu b·∫±ng 'w912'")
        else:
            print("‚ö†Ô∏è Imports OK nh∆∞ng UI v·∫´n c√≥ v·∫•n ƒë·ªÅ")
            print("H√£y ch·∫°y: python main.py ƒë·ªÉ ki·ªÉm tra")
    else:
        print("\n‚ùå V·∫´n c√≥ l·ªói import. Ki·ªÉm tra l·∫°i dependencies:")
        print("   pip install numpy pandas openpyxl psutil")
        print("   Sau ƒë√≥ ch·∫°y l·∫°i script n√†y.")