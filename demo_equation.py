"""Demo Equation Mode - Test ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng"""
import sys
import os

# Th√™m path cho imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def run_equation_demo():
    """Ch·∫°y demo Equation Mode v·ªõi UI ho√†n ch·ªânh"""
    try:
        import tkinter as tk
        from views.equation_view import EquationView
        from utils.config_loader import ConfigLoader
        
        print("üöÄ Kh·ªüi ƒë·ªông Equation Mode Demo...")
        
        # Load config
        config_loader = ConfigLoader()
        config = config_loader.get_mode_config('equation')
        
        # T·∫°o c·ª≠a s·ªï ch√≠nh
        root = tk.Tk()
        root.configure(bg="#F0F8FF")
        
        # Hi·ªÉn th·ªã th√¥ng tin config
        if config:
            print("‚úÖ ƒê√£ load config Equation Mode th√†nh c√¥ng")
            print(f"   - Phi√™n b·∫£n: {config.get('equation', {}).get('version', 'Unknown')}")
            print(f"   - H·ªó tr·ª£ ·∫©n: {config.get('equation', {}).get('supported_variables', {}).get('available', [2,3,4])}")
        else:
            print("‚ö†Ô∏è S·ª≠ d·ª•ng fallback config")
        
        # Kh·ªüi t·∫°o EquationView
        app = EquationView(root, config=config)
        print("‚úÖ EquationView kh·ªüi t·∫°o th√†nh c√¥ng!")
        
        print("\nüìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
        print("1. Ch·ªçn s·ªë ·∫©n (2, 3, ho·∫∑c 4)")
        print("2. Ch·ªçn phi√™n b·∫£n m√°y t√≠nh (fx799, fx800, v.v.)")
        print("3. Nh·∫≠p h·ªá s·ªë ph∆∞∆°ng tr√¨nh (v√≠ d·ª•: '2,3,7' cho 2x+3y=7)")
        print("4. B·∫•m 'üöÄ X·ª≠ l√Ω & Gi·∫£i nghi·ªám' ƒë·ªÉ t√≠nh to√°n")
        print("5. Xem k·∫øt qu·∫£ v√† copy keylog")
        print("\nüéâ S·∫µn s√†ng s·ª≠ d·ª•ng Equation Mode!")
        
        # Ch·∫°y giao di·ªán
        root.mainloop()
        
    except ImportError as e:
        print(f"‚ùå L·ªói import: {e}")
        print("\nüîß C·∫ßn c√†i ƒë·∫∑t dependencies:")
        print("pip install numpy pandas openpyxl tkinter psutil")
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o: {e}")
        import traceback
        print(traceback.format_exc())

def test_sample_equations():
    """Test v·ªõi d·ªØ li·ªáu m·∫´u"""
    try:
        from services.equation.equation_service import EquationService
        
        print("\nüß™ Testing c√°c v√≠ d·ª• ph∆∞∆°ng tr√¨nh m·∫´u...")
        
        service = EquationService()
        
        # Test case 1: H·ªá 2 ph∆∞∆°ng tr√¨nh 2 ·∫©n
        print("\n1Ô∏è‚É£ Test h·ªá 2x2:")
        print("Ph∆∞∆°ng tr√¨nh: 2x + 3y = 7, x - y = 1")
        
        service.set_variables_count(2)
        success, status, solutions, final = service.process_complete_workflow(["2,3,7", "1,-1,1"])
        print(f"K·∫øt qu·∫£: {solutions}")
        print(f"Keylog: {final}")
        
        # Test case 2: H·ªá 3 ph∆∞∆°ng tr√¨nh 3 ·∫©n
        print("\n2Ô∏è‚É£ Test h·ªá 3x3:")
        print("Ph∆∞∆°ng tr√¨nh: x+y+z=6, 2x-y+z=1, x+2y-z=2")
        
        service.set_variables_count(3)
        success, status, solutions, final = service.process_complete_workflow(["1,1,1,6", "2,-1,1,1", "1,2,-1,2"])
        print(f"K·∫øt qu·∫£: {solutions}")
        print(f"Keylog: {final}")
        
        # Test case 3: V·ªõi bi·ªÉu th·ª©c
        print("\n3Ô∏è‚É£ Test v·ªõi bi·ªÉu th·ª©c:")
        print("Ph∆∞∆°ng tr√¨nh: sqrt(4)x + pi*y = 10, sin(pi/2)*x + cos(0)*y = 3")
        
        service.set_variables_count(2)
        success, status, solutions, final = service.process_complete_workflow(["sqrt(4),pi,10", "sin(pi/2),cos(0),3"])
        print(f"K·∫øt qu·∫£: {solutions}")
        print(f"Keylog: {final}")
        
        print("\n‚úÖ T·∫•t c·∫£ test cases ƒë·ªÅu ho√†n th√†nh!")
        
    except Exception as e:
        print(f"‚ùå L·ªói test: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    print("üßÆ ConvertKeylogApp v2.0 - Equation Mode Demo")
    print("=" * 55)
    
    # Ki·ªÉm tra dependencies
    try:
        import numpy
        import pandas 
        print("‚úÖ Dependencies OK (numpy, pandas)")
    except ImportError as e:
        print(f"‚ùå Thi·∫øu dependency: {e}")
        print("Ch·∫°y: pip install numpy pandas openpyxl tkinter psutil")
        exit(1)
    
    # Test c√°c sample equations tr∆∞·ªõc
    test_sample_equations()
    
    print("\n" + "=" * 55)
    print("üöÄ Kh·ªüi ƒë·ªông Equation Mode GUI...")
    
    # Ch·∫°y demo UI
    run_equation_demo()