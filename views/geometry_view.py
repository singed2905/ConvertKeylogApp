import tkinter as tk
from tkinter import messagebox, filedialog

class GeometryView:
    def __init__(self, window, config=None):
        self.window = window
        self.window.title("Geometry Mode - Now with Logic!")
        self.window.geometry("800x800")
        self.window.configure(bg="#F8F9FA")

        # L∆∞u config ƒë∆∞·ª£c truy·ªÅn v√†o
        self.config = config or {}
        
        # Import v√† kh·ªüi t·∫°o GeometryService (lazy loading)
        self.geometry_service = None
        self._initialize_service()
        
        # Bi·∫øn v√† tr·∫°ng th√°i
        self._initialize_variables()
        self._setup_ui()
        
        # ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng ngay l·∫ßn ƒë·∫ßu
        self._on_operation_changed()
        self._on_shape_changed()

    def _initialize_service(self):
        """Kh·ªüi t·∫°o GeometryService"""
        try:
            from services.geometry.geometry_service import GeometryService
            self.geometry_service = GeometryService(self.config)
        except Exception as e:
            print(f"Warning: Could not initialize GeometryService: {e}")
            self.geometry_service = None

    def _initialize_variables(self):
        """Kh·ªüi t·∫°o t·∫•t c·∫£ bi·∫øn"""
        self.dropdown1_var = tk.StringVar(value="")
        self.dropdown2_var = tk.StringVar(value="")
        self.kich_thuoc_A_var = tk.StringVar(value="3")
        self.kich_thuoc_B_var = tk.StringVar(value="3")
        # ƒê·∫∑t ph√©p to√°n m·∫∑c ƒë·ªãnh ƒë·ªÉ menu hi·ªÉn th·ªã ngay
        self.pheptoan_var = tk.StringVar(value="Kho·∫£ng c√°ch")

        # Ph√™n b·∫£n m·∫∑c ƒë·ªãnh - l·∫•y t·ª´ config ho·∫∑c fallback
        self.phien_ban_list = self._get_available_versions()
        self.phien_ban_var = tk.StringVar(value=self.phien_ban_list[0])
        
        # Bind c√°c thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t service
        self.dropdown1_var.trace('w', self._on_shape_changed)
        self.dropdown2_var.trace('w', self._on_shape_changed)
        self.pheptoan_var.trace('w', self._on_operation_changed)
        self.kich_thuoc_A_var.trace('w', self._on_dimension_changed)
        self.kich_thuoc_B_var.trace('w', self._on_dimension_changed)
        
        # C·∫≠p nh·∫≠t state ban ƒë·∫ßu cho service
        if self.geometry_service:
            self.geometry_service.set_kich_thuoc(self.kich_thuoc_A_var.get(), self.kich_thuoc_B_var.get())

    def _get_available_versions(self):
        """L·∫•y danh s√°ch phi√™n b·∫£n t·ª´ config ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh"""
        try:
            if self.config and 'common' in self.config and 'versions' in self.config['common']:
                versions_data = self.config['common']['versions']
                if 'versions' in versions_data:
                    return [f"Phi√™n b·∫£n {v}" for v in versions_data['versions']]
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load versions t·ª´ config: {e}")
        
        # Fallback n·∫øu kh√¥ng c√≥ config
        return ["Phi√™n b·∫£n fx799", "Phi√™n b·∫£n fx880", "Phi√™n b·∫£n fx801"]
    
    def _get_available_operations(self):
        """L·∫•y danh s√°ch ph√©p to√°n"""
        if self.geometry_service:
            return self.geometry_service.get_available_operations()
        else:
            return ["T∆∞∆°ng giao", "Kho·∫£ng c√°ch", "Di·ªán t√≠ch", "Th·ªÉ t√≠ch", "PT ƒë∆∞·ªùng th·∫≥ng"]
    
    def _on_shape_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi h√¨nh d·∫°ng"""
        if self.geometry_service:
            self.geometry_service.set_current_shapes(self.dropdown1_var.get(), self.dropdown2_var.get())
        self._update_input_frames()
    
    def _on_operation_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ph√©p to√°n"""
        operation = self.pheptoan_var.get()
        if operation and self.geometry_service:
            self.geometry_service.set_current_operation(operation)
            # C·∫≠p nh·∫≠t dropdown options theo ph√©p to√°n
            available_shapes = self.geometry_service.update_dropdown_options(operation)
            self._update_shape_dropdowns(available_shapes)
        self._update_input_frames()
    
    def _on_dimension_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi k√≠ch th∆∞·ªõc"""
        if self.geometry_service:
            self.geometry_service.set_kich_thuoc(self.kich_thuoc_A_var.get(), self.kich_thuoc_B_var.get())
    
    def _update_shape_dropdowns(self, available_shapes):
        """C·∫≠p nh·∫≠t c√°c dropdown theo ph√©p to√°n v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n"""
        if not available_shapes:
            return
        try:
            # C·∫≠p nh·∫≠t dropdown A
            menu_A = self.dropdown1_menu['menu']
            menu_A.delete(0, 'end')
            for shape in available_shapes:
                menu_A.add_command(label=shape, command=tk._setit(self.dropdown1_var, shape))
            # ƒê·∫∑t m·∫∑c ƒë·ªãnh n·∫øu gi√° tr·ªã hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá
            if self.dropdown1_var.get() not in available_shapes:
                self.dropdown1_var.set(available_shapes[0])
            
            # C·∫≠p nh·∫≠t dropdown B khi ph√©p to√°n c·∫ßn B
            if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
                menu_B = self.dropdown2_menu['menu']
                menu_B.delete(0, 'end')
                for shape in available_shapes:
                    menu_B.add_command(label=shape, command=tk._setit(self.dropdown2_var, shape))
                if self.dropdown2_var.get() not in available_shapes:
                    self.dropdown2_var.set(available_shapes[0])
                # ƒê·∫£m b·∫£o hi·ªÉn th·ªã B
                self.label_B.grid()
                self.dropdown2_menu.grid()
            else:
                # ·∫®n dropdown B khi kh√¥ng c·∫ßn
                self.label_B.grid_remove()
                self.dropdown2_menu.grid_remove()
        except Exception as e:
            print(f"Warning: Could not update dropdowns: {e}")
    
    def _update_input_frames(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã c√°c frame nh·∫≠p li·ªáu"""
        # ·∫®n c√°c frame c≈© tr∆∞·ªõc
        for attr_name in dir(self):
            if attr_name.startswith('frame_A_') or attr_name.startswith('frame_B_'):
                frame = getattr(self, attr_name, None)
                if frame and hasattr(frame, 'grid_remove'):
                    try:
                        frame.grid_remove()
                    except:
                        pass
        
        # Hi·ªÉn th·ªã frame cho nh√≥m A
        shape_A = self.dropdown1_var.get()
        if shape_A:
            self._show_input_frame_A(shape_A)
        
        # Hi·ªÉn th·ªã frame cho nh√≥m B (n·∫øu c·∫ßn)
        if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
            shape_B = self.dropdown2_var.get()
            if shape_B:
                self._show_input_frame_B(shape_B)
    
    def _show_input_frame_A(self, shape):
        """Hi·ªÉn th·ªã frame nh·∫≠p li·ªáu cho nh√≥m A"""
        try:
            if shape == "ƒêi·ªÉm" and hasattr(self, 'frame_A_diem'):
                self.frame_A_diem.grid()
            elif shape == "ƒê∆∞·ªùng th·∫≥ng" and hasattr(self, 'frame_A_duong'):
                self.frame_A_duong.grid()
            # TODO: add plane/circle/sphere frames when completed
        except Exception as e:
            print(f"Warning: Could not show frame A for {shape}: {e}")
    
    def _show_input_frame_B(self, shape):
        """Hi·ªÉn th·ªã frame nh·∫≠p li·ªáu cho nh√≥m B"""
        try:
            if shape == "ƒêi·ªÉm" and hasattr(self, 'frame_B_diem'):
                self.frame_B_diem.grid()
            elif shape == "ƒê∆∞·ªùng th·∫≥ng" and hasattr(self, 'frame_B_duong'):
                self.frame_B_duong.grid()
            # TODO: add plane/circle/sphere frames when completed
        except Exception as e:
            print(f"Warning: Could not show frame B for {shape}: {e}")

    def _setup_ui(self):
        """Setup giao di·ªán ch√≠nh"""
        # Header
        self._create_header()
        
        self.main_container = tk.Frame(self.window, bg="#F8F9FA")
        self.main_container.pack(fill="both", expand=True, padx=10, pady=5)

        # Top frame v·ªõi dropdown
        top_frame = tk.Frame(self.main_container, bg="#F8F9FA")
        top_frame.grid(row=0, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        self._setup_dropdowns(top_frame)
        self._setup_group_a_frames()
        self._setup_group_b_frames()
        self._setup_control_frame()
        
        # Hi·ªÉn th√¥ng b√°o ban ƒë·∫ßu
        self._show_ready_message()

    def _create_header(self):
        """T·∫°o header"""
        HEADER_COLORS = {
            "primary": "#2E86AB", "secondary": "#1B5299", "text": "#FFFFFF",
            "accent": "#F18F01", "success": "#4CAF50", "warning": "#FF9800"
        }

        # Main header frame
        self.header_frame = tk.Frame(self.window, bg=HEADER_COLORS["primary"], height=80)
        self.header_frame.pack(fill="x", padx=10, pady=5)
        self.header_frame.pack_propagate(False)

        header_content = tk.Frame(self.header_frame, bg=HEADER_COLORS["primary"])
        header_content.pack(fill="both", expand=True, padx=15, pady=10)

        # Logo v√† title
        left_section = tk.Frame(header_content, bg=HEADER_COLORS["primary"])
        left_section.pack(side="left", fill="y")

        logo_frame = tk.Frame(left_section, bg=HEADER_COLORS["primary"])
        logo_frame.pack(side="top", fill="x")
        tk.Label(logo_frame, text="üß†", font=("Arial", 20),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")
        tk.Label(logo_frame, text="Geometry Mode v2.0 - With Logic!", font=("Arial", 16, "bold"),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left", padx=(5, 20))

        # Operation selector - l·∫•y t·ª´ service
        operation_frame = tk.Frame(left_section, bg=HEADER_COLORS["primary"])
        operation_frame.pack(side="top", fill="x", pady=(5, 0))
        tk.Label(operation_frame, text="Ph√©p to√°n:", font=("Arial", 10),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")

        operations = self._get_available_operations()
        self.operation_menu = tk.OptionMenu(operation_frame, self.pheptoan_var, *operations)
        self.operation_menu.config(
            bg=HEADER_COLORS["secondary"], fg=HEADER_COLORS["text"],
            font=("Arial", 10, "bold"), width=15, relief="flat", borderwidth=0
        )
        self.operation_menu.pack(side="left", padx=(5, 0))

        # Phi√™n b·∫£n
        center_section = tk.Frame(header_content, bg=HEADER_COLORS["primary"])
        center_section.pack(side="left", fill="both", expand=True, padx=20)

        version_frame = tk.Frame(center_section, bg=HEADER_COLORS["primary"])
        version_frame.pack(side="top", fill="x")
        tk.Label(version_frame, text="Phi√™n b·∫£n:", font=("Arial", 9),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")

        self.version_menu = tk.OptionMenu(version_frame, self.phien_ban_var, *self.phien_ban_list)
        self.version_menu.config(
            bg=HEADER_COLORS["accent"], fg="white", font=("Arial", 9),
            width=15, relief="flat", borderwidth=0
        )
        self.version_menu.pack(side="left", padx=(5, 0))
        
        # Service status indicator
        status_text = "Service: ‚úÖ Ready" if self.geometry_service else "Service: ‚ö†Ô∏è Error"
        tk.Label(center_section, text=status_text, font=("Arial", 8),
                bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="bottom")

    def _setup_dropdowns(self, parent):
        """Setup dropdown ch·ªçn nh√≥m v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        shapes = []
        if self.geometry_service:
            shapes = self.geometry_service.get_available_shapes()
        else:
            shapes = ["ƒêi·ªÉm", "ƒê∆∞·ªùng th·∫≥ng", "M·∫∑t ph·∫≥ng", "ƒê∆∞·ªùng tr√≤n", "M·∫∑t c·∫ßu"]

        # ƒê·∫∑t m·∫∑c ƒë·ªãnh ngay ƒë·ªÉ hi·ªÉn th·ªã nh√£n
        if shapes:
            self.dropdown1_var.set(shapes[0])
            self.dropdown2_var.set(shapes[0])

        self.label_A = tk.Label(parent, text="Ch·ªçn nh√≥m A:", bg="#F8F9FA", font=("Arial", 10))
        self.label_A.grid(row=0, column=0, padx=5, pady=5, sticky="w")

        self.dropdown1_menu = tk.OptionMenu(parent, self.dropdown1_var, *shapes)
        self.dropdown1_menu.config(width=15, font=("Arial", 9))
        self.dropdown1_menu.grid(row=0, column=1, padx=5, pady=5)

        self.label_B = tk.Label(parent, text="Ch·ªçn nh√≥m B:", bg="#F8F9FA", font=("Arial", 10))
        self.label_B.grid(row=0, column=2, padx=5, pady=5, sticky="w")

        self.dropdown2_menu = tk.OptionMenu(parent, self.dropdown2_var, *shapes)
        self.dropdown2_menu.config(width=15, font=("Arial", 9))
        self.dropdown2_menu.grid(row=0, column=3, padx=5, pady=5)

    def _setup_group_a_frames(self):
        """Setup frames cho nh√≥m A (ƒêi·ªÉm + ƒê∆∞·ªùng th·∫≥ng)"""
        # Frame ƒêi·ªÉm A
        self.frame_A_diem = tk.LabelFrame(
            self.main_container, text="üéØ NH√ìM A - ƒêi·ªÉm",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_diem.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_diem, text="K√≠ch th∆∞·ªõc:", bg="#FFFFFF").grid(row=0, column=0)
        tk.OptionMenu(self.frame_A_diem, self.kich_thuoc_A_var, "2", "3").grid(row=0, column=1)

        tk.Label(self.frame_A_diem, text="Nh·∫≠p to·∫° ƒë·ªô (x,y,z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_diem_A = tk.Entry(self.frame_A_diem, width=40)
        self.entry_diem_A.grid(row=1, column=1, columnspan=2, sticky="we")
        
        # Frame ƒê∆∞·ªùng th·∫≥ng A
        self.frame_A_duong = tk.LabelFrame(
            self.main_container, text="üìè NH√ìM A - ƒê∆∞·ªùng th·∫≥ng",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_duong.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_duong, text="ƒêi·ªÉm (A,B,C):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_point_A = tk.Entry(self.frame_A_duong, width=30)
        self.entry_point_A.grid(row=0, column=1)
        
        tk.Label(self.frame_A_duong, text="Vector (X,Y,Z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_vector_A = tk.Entry(self.frame_A_duong, width=30)
        self.entry_vector_A.grid(row=1, column=1)
        
        # ·∫®n t·∫•t c·∫£ frame ban ƒë·∫ßu
        self.frame_A_diem.grid_remove()
        self.frame_A_duong.grid_remove()

    def _setup_group_b_frames(self):
        """Setup frames cho nh√≥m B (ƒêi·ªÉm + ƒê∆∞·ªùng th·∫≥ng)"""
        # Frame ƒêi·ªÉm B
        self.frame_B_diem = tk.LabelFrame(
            self.main_container, text="üéØ NH√ìM B - ƒêi·ªÉm",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_diem.grid(row=3, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_B_diem, text="K√≠ch th∆∞·ªõc:", bg="#FFFFFF").grid(row=0, column=0)
        tk.OptionMenu(self.frame_B_diem, self.kich_thuoc_B_var, "2", "3").grid(row=0, column=1)

        tk.Label(self.frame_B_diem, text="Nh·∫≠p to·∫° ƒë·ªô (x,y,z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_diem_B = tk.Entry(self.frame_B_diem, width=40)
        self.entry_diem_B.grid(row=1, column=1, columnspan=2, sticky="we")
        
        # Frame ƒê∆∞·ªùng th·∫≥ng B
        self.frame_B_duong = tk.LabelFrame(
            self.main_container, text="üìè NH√ìM B - ƒê∆∞·ªùng th·∫≥ng",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_duong.grid(row=4, column=0, columnspan=4, padx=10, pady=5, sticky="we")
        
        tk.Label(self.frame_B_duong, text="ƒêi·ªÉm (A,B,C):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_point_B = tk.Entry(self.frame_B_duong, width=30)
        self.entry_point_B.grid(row=0, column=1)
        tk.Label(self.frame_B_duong, text="Vector (X,Y,Z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_vector_B = tk.Entry(self.frame_B_duong, width=30)
        self.entry_vector_B.grid(row=1, column=1)

        # ·∫®n frame ban ƒë·∫ßu
        self.frame_B_diem.grid_remove()
        self.frame_B_duong.grid_remove()
    
    def _get_input_data_A(self):
        """L·∫•y d·ªØ li·ªáu nh·∫≠p cho nh√≥m A"""
        shape = self.dropdown1_var.get()
        data = {}
        
        if shape == "ƒêi·ªÉm":
            data['point_input'] = self.entry_diem_A.get() if hasattr(self, 'entry_diem_A') else ''
        elif shape == "ƒê∆∞·ªùng th·∫≥ng":
            data['line_A1'] = self.entry_point_A.get() if hasattr(self, 'entry_point_A') else ''
            data['line_X1'] = self.entry_vector_A.get() if hasattr(self, 'entry_vector_A') else ''
        
        return data
    
    def _get_input_data_B(self):
        """L·∫•y d·ªØ li·ªáu nh·∫≠p cho nh√≥m B"""
        shape = self.dropdown2_var.get()
        data = {}
        
        if shape == "ƒêi·ªÉm":
            data['point_input'] = self.entry_diem_B.get() if hasattr(self, 'entry_diem_B') else ''
        elif shape == "ƒê∆∞·ªùng th·∫≥ng":
            data['line_A2'] = self.entry_point_B.get() if hasattr(self, 'entry_point_B') else ''
            data['line_X2'] = self.entry_vector_B.get() if hasattr(self, 'entry_vector_B') else ''
        
        return data
    
    def _process_group_A(self):
        """X·ª≠ l√Ω nh√≥m A"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
            
            data_A = self._get_input_data_A()
            result = self.geometry_service.thuc_thi_A(data_A)
            self._update_result_display(f"Nh√≥m A ƒë√£ x·ª≠ l√Ω: {result}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m A: {str(e)}")
    
    def _process_group_B(self):
        """X·ª≠ l√Ω nh√≥m B"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
                
            data_B = self._get_input_data_B()
            result = self.geometry_service.thuc_thi_B(data_B)
            self._update_result_display(f"Nh√≥m B ƒë√£ x·ª≠ l√Ω: {result}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m B: {str(e)}")
    
    def _process_all(self):
        """Th·ª±c thi t·∫•t c·∫£ - Core function!"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
            
            # Ki·ªÉm tra xem ƒë√£ ch·ªçn ph√©p to√°n v√† h√¨nh d·∫°ng ch∆∞a
            if not self.pheptoan_var.get():
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ph√©p to√°n!")
                return
            
            if not self.dropdown1_var.get():
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h√¨nh d·∫°ng cho nh√≥m A!")
                return
            
            # L·∫•y d·ªØ li·ªáu
            data_A = self._get_input_data_A()
            data_B = self._get_input_data_B()
            
            # X·ª≠ l√Ω
            result_A, result_B = self.geometry_service.thuc_thi_tat_ca(data_A, data_B)
            
            # Sinh k·∫øt qu·∫£ cu·ªëi c√πng
            final_result = self.geometry_service.generate_final_result()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ - matching TL style
            message = f"‚ú® K·∫øt qu·∫£ m√£ h√≥a (cho m√°y t√≠nh):\n{final_result}\n\n"
            message += f"üìà Chi ti·∫øt x·ª≠ l√Ω:\n"
            message += f"Ph√©p to√°n: {self.pheptoan_var.get()}\n"
            message += f"Nh√≥m A ({self.dropdown1_var.get()}): {result_A}\n"
            if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
                message += f"Nh√≥m B ({self.dropdown2_var.get()}): {result_B}"
            
            self._update_result_display(message)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói th·ª±c thi: {str(e)}")
    
    def _import_excel(self):
        """Import d·ªØ li·ªáu t·ª´ Excel"""
        try:
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file Excel",
                filetypes=[("Excel files", "*.xlsx *.xls")]
            )
            
            if file_path:
                self._update_result_display(f"Ch·ª©c nƒÉng import Excel s·∫Ω ƒë∆∞·ª£c ho√†n thi·ªán sau.\nFile ƒë√£ ch·ªçn: {file_path}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói import Excel: {str(e)}")
    
    def _export_excel(self):
        """Xu·∫•t k·∫øt qu·∫£ ra Excel"""
        try:
            self._update_result_display("Ch·ª©c nƒÉng export Excel s·∫Ω ƒë∆∞·ª£c ho√†n thi·ªán sau.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói export Excel: {str(e)}")
    
    def _update_result_display(self, message):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã k·∫øt qu·∫£"""
        self.entry_tong.delete(1.0, tk.END)
        self.entry_tong.insert(tk.END, message)
    
    def _show_ready_message(self):
        """Hi·ªán th√¥ng b√°o s·∫µn s√†ng"""
        if self.geometry_service:
            message = "‚ú® Geometry Mode v2.0 - ƒê√£ t√≠ch h·ª£p logic t·ª´ TL!\n"
            message += "Ch·ªçn ph√©p to√°n v√† h√¨nh d·∫°ng, sau ƒë√≥ nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ th·ª±c thi."
        else:
            message = "‚ö†Ô∏è GeometryService kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c.\nVui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t!"
        
        self.entry_tong.insert(tk.END, message)

    def _setup_control_frame(self):
        """Setup control frame v·ªõi buttons v√† result display"""
        self.frame_tong = tk.LabelFrame(
            self.main_container, text="üéâ K·∫æT QU·∫¢ & ƒêI·ªÄU KHI·ªÇN",
            bg="#FFFFFF", font=("Arial", 10, "bold")
        )
        self.frame_tong.grid(row=5, column=0, columnspan=4, padx=10, pady=10, sticky="we")

        # Text widget hi·ªÉn th·ªã k·∫øt qu·∫£
        self.entry_tong = tk.Text(
            self.main_container,
            width=80,
            height=4,
            font=("Courier New", 9),
            wrap=tk.WORD,
            bg="#F8F9FA",
            fg="black",
            relief="solid",
            bd=1,
            padx=5,
            pady=5
        )
        self.entry_tong.grid(row=6, column=0, columnspan=4, padx=5, pady=5, sticky="we")

        # N√∫t Import Excel
        self.btn_import_excel = tk.Button(
            self.frame_tong, text="üìÅ Import Excel",
            command=self._import_excel,
            bg="#FF9800", fg="white", font=("Arial", 9, "bold")
        )
        self.btn_import_excel.grid(row=0, column=0, columnspan=4, pady=5, sticky="we")

        # Frame cho n√∫t th·ªß c√¥ng
        self.frame_buttons = tk.Frame(self.frame_tong, bg="#FFFFFF")
        self.frame_buttons.grid(row=1, column=0, columnspan=4, pady=5, sticky="we")

        tk.Button(self.frame_buttons, text="üîÑ X·ª≠ l√Ω Nh√≥m A",
                  command=self._process_group_A,
                  bg="#2196F3", fg="white", font=("Arial", 9)).grid(row=0, column=0, padx=5)
        tk.Button(self.frame_buttons, text="üîÑ X·ª≠ l√Ω Nh√≥m B",
                  command=self._process_group_B,
                  bg="#2196F3", fg="white", font=("Arial", 9)).grid(row=0, column=1, padx=5)
        tk.Button(self.frame_buttons, text="üöÄ Th·ª±c thi t·∫•t c·∫£",
                  command=self._process_all,
                  bg="#4CAF50", fg="white", font=("Arial", 9, "bold")).grid(row=0, column=2, padx=5)
        tk.Button(self.frame_buttons, text="üíæ Xu·∫•t Excel",
                  command=self._export_excel,
                  bg="#FF9800", fg="white", font=("Arial", 9, "bold")).grid(row=0, column=3, padx=5)


if __name__ == "__main__":
    root = tk.Tk()
    app = GeometryView(root)
    root.mainloop()
