import tkinter as tk
from tkinter import messagebox, filedialog, simpledialog
from tkinter import ttk
import threading
import os
from datetime import datetime
import psutil

class GeometryView:
    def __init__(self, window, config=None):
        self.window = window
        self.window.title("Geometry Mode - Anti-Crash Excel! üí™")
        self.window.geometry("900x900")
        self.window.configure(bg="#F8F9FA")

        # L∆∞u config ƒë∆∞·ª£c truy·ªÅn v√†o
        self.config = config or {}
        
        # Import v√† kh·ªüi t·∫°o GeometryService (lazy loading)
        self.geometry_service = None
        self._initialize_service()
        
        # Excel processing state
        self.imported_data = False
        self.imported_file_path = ""
        self.imported_file_name = ""  # NEW: store only file name after import
        self.manual_data_entered = False
        self.processing_cancelled = False
        self.is_large_file = False  # Track if current file is large
        self.has_result = False  # Track if manual result is available
        
        # Bi·∫øn v√† tr·∫°ng th√°i
        self._initialize_variables()
        self._setup_ui()
        
        # ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng ngay l·∫ßn ƒë·∫ßu
        self._on_operation_changed()
        self._on_shape_changed()

    def _initialize_service(self):
        """Kh·ªüi t·∫°o GeometryService"""
        try:
            from services.geometry.geometry_service import GeometryService
            self.geometry_service = GeometryService(self.config)
        except Exception as e:
            print(f"Warning: Could not initialize GeometryService: {e}")
            self.geometry_service = None

    def _initialize_variables(self):
        """Kh·ªüi t·∫°o t·∫•t c·∫£ bi·∫øn"""
        self.dropdown1_var = tk.StringVar(value="")
        self.dropdown2_var = tk.StringVar(value="")
        self.kich_thuoc_A_var = tk.StringVar(value="3")
        self.kich_thuoc_B_var = tk.StringVar(value="3")
        # ƒê·∫∑t ph√©p to√°n m·∫∑c ƒë·ªãnh ƒë·ªÉ menu hi·ªÉn th·ªã ngay
        self.pheptoan_var = tk.StringVar(value="Kho·∫£ng c√°ch")

        # Phi√™n b·∫£n m·∫∑c ƒë·ªãnh - l·∫•y t·ª´ config ho·∫∑c fallback
        self.phien_ban_list = self._get_available_versions()
        self.phien_ban_var = tk.StringVar(value=self.phien_ban_list[0])
        
        # Bind c√°c thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t service
        self.dropdown1_var.trace('w', self._on_shape_changed)
        self.dropdown2_var.trace('w', self._on_shape_changed)
        self.pheptoan_var.trace('w', self._on_operation_changed)
        self.kich_thuoc_A_var.trace('w', self._on_dimension_changed)
        self.kich_thuoc_B_var.trace('w', self._on_dimension_changed)
        
        # Bind input events to detect manual data entry
        self.window.after(1000, self._setup_input_bindings)
        
        # C·∫≠p nh·∫≠t state ban ƒë·∫ßu cho service
        if self.geometry_service:
            self.geometry_service.set_kich_thuoc(self.kich_thuoc_A_var.get(), self.kich_thuoc_B_var.get())
    
    def _setup_input_bindings(self):
        """Setup bindings for input change detection"""
        entries = self._get_all_input_entries()
        for entry in entries:
            if hasattr(entry, 'bind'):
                entry.bind('<KeyRelease>', self._on_input_data_changed)
    
    def _get_all_input_entries(self):
        """Get all input entry widgets"""
        entries = []
        
        # Collect all entry widgets
        for attr_name in dir(self):
            if attr_name.startswith('entry_') and hasattr(self, attr_name):
                entry = getattr(self, attr_name)
                if hasattr(entry, 'get'):  # It's an Entry widget
                    entries.append(entry)
        
        return entries
    
    def _on_input_data_changed(self, event):
        """Handle manual data input changes"""
        if self.imported_data:
            messagebox.showerror("L·ªói", "ƒê√£ import Excel, kh√¥ng th·ªÉ nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng!")
            event.widget.delete(0, tk.END)
            return

        has_data = self._check_manual_data()
        
        if has_data and not self.manual_data_entered:
            self.manual_data_entered = True
            self._show_manual_buttons()
        elif not has_data and self.manual_data_entered:
            self.manual_data_entered = False
            self._hide_action_buttons()
    
    def _check_manual_data(self):
        """Check if manual data has been entered"""
        entries = self._get_all_input_entries()
        for entry in entries:
            try:
                if entry.get().strip():
                    return True
            except:
                pass
        return False
    
    def _show_manual_buttons(self):
        """Show buttons for manual mode"""
        self.frame_buttons_manual.grid()
        if hasattr(self, 'frame_buttons_import'):
            self.frame_buttons_import.grid_remove()
    
    def _show_import_buttons(self):
        """Show buttons for import mode"""
        if hasattr(self, 'frame_buttons_import'):
            self.frame_buttons_import.grid()
        self.frame_buttons_manual.grid_remove()
    
    def _hide_action_buttons(self):
        """Hide all action buttons"""
        self.frame_buttons_manual.grid_remove()
        if hasattr(self, 'frame_buttons_import'):
            self.frame_buttons_import.grid_remove()

    def _get_available_versions(self):
        """L·∫•y danh s√°ch phi√™n b·∫£n t·ª´ config ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh"""
        try:
            if self.config and 'common' in self.config and 'versions' in self.config['common']:
                versions_data = self.config['common']['versions']
                if 'versions' in versions_data:
                    return [f"Phi√™n b·∫£n {v}" for v in versions_data['versions']]
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load versions t·ª´ config: {e}")
        
        # Fallback n·∫øu kh√¥ng c√≥ config
        return ["Phi√™n b·∫£n fx799", "Phi√™n b·∫£n fx880", "Phi√™n b·∫£n fx801"]
    
    def _get_available_operations(self):
        """L·∫•y danh s√°ch ph√©p to√°n"""
        if self.geometry_service:
            return self.geometry_service.get_available_operations()
        else:
            return ["T∆∞∆°ng giao", "Kho·∫£ng c√°ch", "Di·ªán t√≠ch", "Th·ªÉ t√≠ch", "PT ƒë∆∞·ªùng th·∫≥ng"]
    
    def _on_shape_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi h√¨nh d·∫°ng"""
        if self.geometry_service:
            self.geometry_service.set_current_shapes(self.dropdown1_var.get(), self.dropdown2_var.get())
        self._update_input_frames()
    
    def _on_operation_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ph√©p to√°n"""
        operation = self.pheptoan_var.get()
        if operation and self.geometry_service:
            self.geometry_service.set_current_operation(operation)
            # C·∫≠p nh·∫≠t dropdown options theo ph√©p to√°n
            available_shapes = self.geometry_service.update_dropdown_options(operation)
            self._update_shape_dropdowns(available_shapes)
        self._update_input_frames()
    
    def _on_dimension_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi k√≠ch th∆∞·ªõc"""
        if self.geometry_service:
            self.geometry_service.set_kich_thuoc(self.kich_thuoc_A_var.get(), self.kich_thuoc_B_var.get())
    
    def _update_shape_dropdowns(self, available_shapes):
        """C·∫≠p nh·∫≠t c√°c dropdown theo ph√©p to√°n v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n"""
        if not available_shapes:
            return
        try:
            # C·∫≠p nh·∫≠t dropdown A
            menu_A = self.dropdown1_menu['menu']
            menu_A.delete(0, 'end')
            for shape in available_shapes:
                menu_A.add_command(label=shape, command=tk._setit(self.dropdown1_var, shape))
            # ƒê·∫∑t m·∫∑c ƒë·ªãnh n·∫øu gi√° tr·ªã hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá
            if self.dropdown1_var.get() not in available_shapes:
                self.dropdown1_var.set(available_shapes[0])
            
            # C·∫≠p nh·∫≠t dropdown B khi ph√©p to√°n c·∫ßn B
            if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
                menu_B = self.dropdown2_menu['menu']
                menu_B.delete(0, 'end')
                for shape in available_shapes:
                    menu_B.add_command(label=shape, command=tk._setit(self.dropdown2_var, shape))
                if self.dropdown2_var.get() not in available_shapes:
                    self.dropdown2_var.set(available_shapes[0])
                # ƒê·∫£m b·∫£o hi·ªÉn th·ªã B
                self.label_B.grid()
                self.dropdown2_menu.grid()
            else:
                # ·∫®n dropdown B khi kh√¥ng c·∫ßn
                self.label_B.grid_remove()
                self.dropdown2_menu.grid_remove()
        except Exception as e:
            print(f"Warning: Could not update dropdowns: {e}")
    
    def _update_input_frames(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã c√°c frame nh·∫≠p li·ªáu"""
        # ·∫®n c√°c frame c≈© tr∆∞·ªõc
        all_frames = ['frame_A_diem', 'frame_A_duong', 'frame_A_plane', 'frame_A_circle', 'frame_A_sphere',
                     'frame_B_diem', 'frame_B_duong', 'frame_B_plane', 'frame_B_circle', 'frame_B_sphere']
        for frame_name in all_frames:
            frame = getattr(self, frame_name, None)
            if frame and hasattr(frame, 'grid_remove'):
                try:
                    frame.grid_remove()
                except:
                    pass
        
        # Hi·ªÉn th·ªã frame cho nh√≥m A
        shape_A = self.dropdown1_var.get()
        if shape_A:
            self._show_input_frame_A(shape_A)
        
        # Hi·ªÉn th·ªã frame cho nh√≥m B (n·∫øu c·∫ßn)
        if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"]:
            shape_B = self.dropdown2_var.get()
            if shape_B:
                self._show_input_frame_B(shape_B)
    
    def _show_input_frame_A(self, shape):
        """Hi·ªÉn th·ªã frame nh·∫≠p li·ªáu cho nh√≥m A"""
        try:
            if shape == "ƒêi·ªÉm" and hasattr(self, 'frame_A_diem'):
                self.frame_A_diem.grid()
            elif shape == "ƒê∆∞·ªùng th·∫≥ng" and hasattr(self, 'frame_A_duong'):
                self.frame_A_duong.grid()
            elif shape == "M·∫∑t ph·∫≥ng" and hasattr(self, 'frame_A_plane'):
                self.frame_A_plane.grid()
            elif shape == "ƒê∆∞·ªùng tr√≤n" and hasattr(self, 'frame_A_circle'):
                self.frame_A_circle.grid()
            elif shape == "M·∫∑t c·∫ßu" and hasattr(self, 'frame_A_sphere'):
                self.frame_A_sphere.grid()
        except Exception as e:
            print(f"Warning: Could not show frame A for {shape}: {e}")
    
    def _show_input_frame_B(self, shape):
        """Hi·ªÉn th·ªã frame nh·∫≠p li·ªáu cho nh√≥m B"""
        try:
            if shape == "ƒêi·ªÉm" and hasattr(self, 'frame_B_diem'):
                self.frame_B_diem.grid()
            elif shape == "ƒê∆∞·ªùng th·∫≥ng" and hasattr(self, 'frame_B_duong'):
                self.frame_B_duong.grid()
            elif shape == "M·∫∑t ph·∫≥ng" and hasattr(self, 'frame_B_plane'):
                self.frame_B_plane.grid()
            elif shape == "ƒê∆∞·ªùng tr√≤n" and hasattr(self, 'frame_B_circle'):
                self.frame_B_circle.grid()
            elif shape == "M·∫∑t c·∫ßu" and hasattr(self, 'frame_B_sphere'):
                self.frame_B_sphere.grid()
        except Exception as e:
            print(f"Warning: Could not show frame B for {shape}: {e}")

    def _setup_ui(self):
        """Setup giao di·ªán ch√≠nh"""
        # Header
        self._create_header()
        
        self.main_container = tk.Frame(self.window, bg="#F8F9FA")
        self.main_container.pack(fill="both", expand=True, padx=10, pady=5)

        # Top frame v·ªõi dropdown
        top_frame = tk.Frame(self.main_container, bg="#F8F9FA")
        top_frame.grid(row=0, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        self._setup_dropdowns(top_frame)
        self._setup_all_input_frames()  # T·∫°o t·∫•t c·∫£ frame
        self._setup_control_frame()
        
        # Hi·ªÉn th√¥ng b√°o ban ƒë·∫ßu
        self._show_ready_message()

    def _create_header(self):
        """T·∫°o header v·ªõi memory monitoring"""
        HEADER_COLORS = {
            "primary": "#2E86AB", "secondary": "#1B5299", "text": "#FFFFFF",
            "accent": "#F18F01", "success": "#4CAF50", "warning": "#FF9800", "danger": "#F44336"
        }

        # Main header frame
        self.header_frame = tk.Frame(self.window, bg=HEADER_COLORS["primary"], height=90)
        self.header_frame.pack(fill="x", padx=10, pady=5)
        self.header_frame.pack_propagate(False)

        header_content = tk.Frame(self.header_frame, bg=HEADER_COLORS["primary"])
        header_content.pack(fill="both", expand=True, padx=15, pady=10)

        # Logo v√† title
        left_section = tk.Frame(header_content, bg=HEADER_COLORS["primary"])
        left_section.pack(side="left", fill="y")

        logo_frame = tk.Frame(left_section, bg=HEADER_COLORS["primary"])
        logo_frame.pack(side="top", fill="x")
        tk.Label(logo_frame, text="üßÆ", font=("Arial", 20),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")
        tk.Label(logo_frame, text="Geometry v2.1 - Anti-Crash! üí™", font=("Arial", 16, "bold"),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left", padx=(5, 20))

        # Operation selector
        operation_frame = tk.Frame(left_section, bg=HEADER_COLORS["primary"])
        operation_frame.pack(side="top", fill="x", pady=(5, 0))
        tk.Label(operation_frame, text="Ph√©p to√°n:", font=("Arial", 10),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")

        operations = self._get_available_operations()
        self.operation_menu = tk.OptionMenu(operation_frame, self.pheptoan_var, *operations)
        self.operation_menu.config(
            bg=HEADER_COLORS["secondary"], fg=HEADER_COLORS["text"],
            font=("Arial", 10, "bold"), width=15, relief="flat", borderwidth=0
        )
        self.operation_menu.pack(side="left", padx=(5, 0))

        # Center section
        center_section = tk.Frame(header_content, bg=HEADER_COLORS["primary"])
        center_section.pack(side="left", fill="both", expand=True, padx=20)

        version_frame = tk.Frame(center_section, bg=HEADER_COLORS["primary"])
        version_frame.pack(side="top", fill="x")
        tk.Label(version_frame, text="Phi√™n b·∫£n:", font=("Arial", 9),
                 bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="left")

        self.version_menu = tk.OptionMenu(version_frame, self.phien_ban_var, *self.phien_ban_list)
        self.version_menu.config(
            bg=HEADER_COLORS["accent"], fg="white", font=("Arial", 9),
            width=15, relief="flat", borderwidth=0
        )
        self.version_menu.pack(side="left", padx=(5, 0))
        
        # Excel status indicator
        self.excel_status_label = tk.Label(
            center_section, text="üìä Excel: ‚úÖ Ready", font=("Arial", 8),
            bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["success"]
        )
        self.excel_status_label.pack(side="bottom")
        
        # Memory status indicator
        self.memory_status_label = tk.Label(
            center_section, text=f"üíæ Memory: {self._get_memory_usage():.1f}MB", font=("Arial", 8),
            bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]
        )
        self.memory_status_label.pack(side="bottom")
        
        # Service status indicator
        status_text = "Service: ‚úÖ Ready" if self.geometry_service else "Service: ‚ö†Ô∏è Error"
        tk.Label(center_section, text=status_text, font=("Arial", 8),
                bg=HEADER_COLORS["primary"], fg=HEADER_COLORS["text"]).pack(side="bottom")
        
        # Start memory monitoring
        self._start_memory_monitoring()
    
    def _get_memory_usage(self) -> float:
        """Get current memory usage in MB"""
        try:
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024
        except:
            return 0.0
    
    def _start_memory_monitoring(self):
        """Start periodic memory monitoring"""
        def update_memory():
            try:
                memory_mb = self._get_memory_usage()
                
                # Color coding for memory usage
                if memory_mb > 800:
                    color = "#F44336"  # Red
                    status = "üî• High"
                elif memory_mb > 500:
                    color = "#FF9800"  # Orange
                    status = "‚ö†Ô∏è Medium"
                else:
                    color = "#4CAF50"  # Green
                    status = "‚úÖ OK"
                
                self.memory_status_label.config(
                    text=f"üíæ Memory: {memory_mb:.1f}MB ({status})",
                    fg=color
                )
                
            except Exception:
                pass
            
            # Schedule next update
            self.window.after(5000, update_memory)  # Update every 5 seconds
        
        update_memory()

    def _setup_dropdowns(self, parent):
        """Setup dropdown ch·ªçn nh√≥m v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        shapes = []
        if self.geometry_service:
            shapes = self.geometry_service.get_available_shapes()
        else:
            shapes = ["ƒêi·ªÉm", "ƒê∆∞·ªùng th·∫≥ng", "M·∫∑t ph·∫≥ng", "ƒê∆∞·ªùng tr√≤n", "M·∫∑t c·∫ßu"]

        # ƒê·∫∑t m·∫∑c ƒë·ªãnh ngay ƒë·ªÉ hi·ªÉn th·ªã nh√£n
        if shapes:
            self.dropdown1_var.set(shapes[0])
            self.dropdown2_var.set(shapes[0])

        self.label_A = tk.Label(parent, text="Ch·ªçn nh√≥m A:", bg="#F8F9FA", font=("Arial", 10))
        self.label_A.grid(row=0, column=0, padx=5, pady=5, sticky="w")

        self.dropdown1_menu = tk.OptionMenu(parent, self.dropdown1_var, *shapes)
        self.dropdown1_menu.config(width=15, font=("Arial", 9))
        self.dropdown1_menu.grid(row=0, column=1, padx=5, pady=5)

        self.label_B = tk.Label(parent, text="Ch·ªçn nh√≥m B:", bg="#F8F9FA", font=("Arial", 10))
        self.label_B.grid(row=0, column=2, padx=5, pady=5, sticky="w")

        self.dropdown2_menu = tk.OptionMenu(parent, self.dropdown2_var, *shapes)
        self.dropdown2_menu.config(width=15, font=("Arial", 9))
        self.dropdown2_menu.grid(row=0, column=3, padx=5, pady=5)

    def _setup_all_input_frames(self):
        """T·∫°o t·∫•t c·∫£ c√°c frame nh·∫≠p li·ªáu cho ƒë·∫ßy ƒë·ªß 5 h√¨nh"""
        # NH√ìM A
        self._create_point_frame_A()
        self._create_line_frame_A()
        self._create_plane_frame_A()
        self._create_circle_frame_A()
        self._create_sphere_frame_A()
        
        # NH√ìM B
        self._create_point_frame_B()
        self._create_line_frame_B()
        self._create_plane_frame_B()
        self._create_circle_frame_B()
        self._create_sphere_frame_B()
    
    # ========== NH√ìM A FRAMES ==========
    def _create_point_frame_A(self):
        """T·∫°o frame ƒëi·ªÉm A"""
        self.frame_A_diem = tk.LabelFrame(
            self.main_container, text="üéØ NH√ìM A - ƒêi·ªÉm",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_diem.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_diem, text="K√≠ch th∆∞·ªõc:", bg="#FFFFFF").grid(row=0, column=0)
        tk.OptionMenu(self.frame_A_diem, self.kich_thuoc_A_var, "2", "3").grid(row=0, column=1)

        tk.Label(self.frame_A_diem, text="Nh·∫≠p t·ªça ƒë·ªô (x,y,z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_diem_A = tk.Entry(self.frame_A_diem, width=40)
        self.entry_diem_A.grid(row=1, column=1, columnspan=2, sticky="we")
        
        self.frame_A_diem.grid_remove()
    
    def _create_line_frame_A(self):
        """T·∫°o frame ƒë∆∞·ªùng th·∫≥ng A"""
        self.frame_A_duong = tk.LabelFrame(
            self.main_container, text="üìè NH√ìM A - ƒê∆∞·ªùng th·∫≥ng",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_duong.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_duong, text="ƒêi·ªÉm (A,B,C):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_point_A = tk.Entry(self.frame_A_duong, width=30)
        self.entry_point_A.grid(row=0, column=1)
        
        tk.Label(self.frame_A_duong, text="Vector (X,Y,Z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_vector_A = tk.Entry(self.frame_A_duong, width=30)
        self.entry_vector_A.grid(row=1, column=1)
        
        self.frame_A_duong.grid_remove()
    
    def _create_plane_frame_A(self):
        """T·∫°o frame m·∫∑t ph·∫≥ng A"""
        self.frame_A_plane = tk.LabelFrame(
            self.main_container, text="üìê NH√ìM A - M·∫∑t ph·∫≥ng",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_plane.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_plane, text="Ph∆∞∆°ng tr√¨nh ax+by+cz+d=0:", bg="#FFFFFF").grid(row=0, column=0, columnspan=4)
        
        tk.Label(self.frame_A_plane, text="a:", bg="#FFFFFF", width=3).grid(row=1, column=0, sticky="e")
        self.entry_a_A = tk.Entry(self.frame_A_plane, width=15)
        self.entry_a_A.grid(row=1, column=1, padx=5)
        
        tk.Label(self.frame_A_plane, text="b:", bg="#FFFFFF", width=3).grid(row=1, column=2, sticky="e")
        self.entry_b_A = tk.Entry(self.frame_A_plane, width=15)
        self.entry_b_A.grid(row=1, column=3, padx=5)
        
        tk.Label(self.frame_A_plane, text="c:", bg="#FFFFFF", width=3).grid(row=2, column=0, sticky="e")
        self.entry_c_A = tk.Entry(self.frame_A_plane, width=15)
        self.entry_c_A.grid(row=2, column=1, padx=5)
        
        tk.Label(self.frame_A_plane, text="d:", bg="#FFFFFF", width=3).grid(row=2, column=2, sticky="e")
        self.entry_d_A = tk.Entry(self.frame_A_plane, width=15)
        self.entry_d_A.grid(row=2, column=3, padx=5)
        
        self.frame_A_plane.grid_remove()
    
    def _create_circle_frame_A(self):
        """T·∫°o frame ƒë∆∞·ªùng tr√≤n A"""
        self.frame_A_circle = tk.LabelFrame(
            self.main_container, text="‚≠ï NH√ìM A - ƒê∆∞·ªùng tr√≤n",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_circle.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_circle, text="T√¢m ƒë∆∞·ªùng tr√≤n (x,y):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_center_A = tk.Entry(self.frame_A_circle, width=25)
        self.entry_center_A.grid(row=0, column=1, padx=5)
        
        tk.Label(self.frame_A_circle, text="B√°n k√≠nh:", bg="#FFFFFF").grid(row=0, column=2)
        self.entry_radius_A = tk.Entry(self.frame_A_circle, width=20)
        self.entry_radius_A.grid(row=0, column=3, padx=5)
        
        self.frame_A_circle.grid_remove()
    
    def _create_sphere_frame_A(self):
        """T·∫°o frame m·∫∑t c·∫ßu A"""
        self.frame_A_sphere = tk.LabelFrame(
            self.main_container, text="üåç NH√ìM A - M·∫∑t c·∫ßu",
            bg="#FFFFFF", fg="#1B5299", font=("Arial", 10, "bold")
        )
        self.frame_A_sphere.grid(row=1, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_A_sphere, text="T√¢m m·∫∑t c·∫ßu (x,y,z):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_sphere_center_A = tk.Entry(self.frame_A_sphere, width=25)
        self.entry_sphere_center_A.grid(row=0, column=1, padx=5)
        
        tk.Label(self.frame_A_sphere, text="B√°n k√≠nh:", bg="#FFFFFF").grid(row=0, column=2)
        self.entry_sphere_radius_A = tk.Entry(self.frame_A_sphere, width=20)
        self.entry_sphere_radius_A.grid(row=0, column=3, padx=5)
        
        self.frame_A_sphere.grid_remove()
    
    # ========== NH√ìM B FRAMES ==========
    def _create_point_frame_B(self):
        """T·∫°o frame ƒëi·ªÉm B"""
        self.frame_B_diem = tk.LabelFrame(
            self.main_container, text="üéØ NH√ìM B - ƒêi·ªÉm",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_diem.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_B_diem, text="K√≠ch th∆∞·ªõc:", bg="#FFFFFF").grid(row=0, column=0)
        tk.OptionMenu(self.frame_B_diem, self.kich_thuoc_B_var, "2", "3").grid(row=0, column=1)

        tk.Label(self.frame_B_diem, text="Nh·∫≠p t·ªça ƒë·ªô (x,y,z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_diem_B = tk.Entry(self.frame_B_diem, width=40)
        self.entry_diem_B.grid(row=1, column=1, columnspan=2, sticky="we")
        
        self.frame_B_diem.grid_remove()
    
    def _create_line_frame_B(self):
        """T·∫°o frame ƒë∆∞·ªùng th·∫≥ng B"""
        self.frame_B_duong = tk.LabelFrame(
            self.main_container, text="üìè NH√ìM B - ƒê∆∞·ªùng th·∫≥ng",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_duong.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")
        
        tk.Label(self.frame_B_duong, text="ƒêi·ªÉm (A,B,C):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_point_B = tk.Entry(self.frame_B_duong, width=30)
        self.entry_point_B.grid(row=0, column=1)
        
        tk.Label(self.frame_B_duong, text="Vector (X,Y,Z):", bg="#FFFFFF").grid(row=1, column=0)
        self.entry_vector_B = tk.Entry(self.frame_B_duong, width=30)
        self.entry_vector_B.grid(row=1, column=1)
        
        self.frame_B_duong.grid_remove()
    
    def _create_plane_frame_B(self):
        """T·∫°o frame m·∫∑t ph·∫≥ng B"""
        self.frame_B_plane = tk.LabelFrame(
            self.main_container, text="üìê NH√ìM B - M·∫∑t ph·∫≥ng",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_plane.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")

        tk.Label(self.frame_B_plane, text="Ph∆∞∆°ng tr√¨nh ax+by+cz+d=0:", bg="#FFFFFF").grid(row=0, column=0, columnspan=4)
        
        tk.Label(self.frame_B_plane, text="a:", bg="#FFFFFF", width=3).grid(row=1, column=0, sticky="e")
        self.entry_a_B = tk.Entry(self.frame_B_plane, width=15)
        self.entry_a_B.grid(row=1, column=1, padx=5)
        
        tk.Label(self.frame_B_plane, text="b:", bg="#FFFFFF", width=3).grid(row=1, column=2, sticky="e")
        self.entry_b_B = tk.Entry(self.frame_B_plane, width=15)
        self.entry_b_B.grid(row=1, column=3, padx=5)
        
        tk.Label(self.frame_B_plane, text="c:", bg="#FFFFFF", width=3).grid(row=2, column=0, sticky="e")
        self.entry_c_B = tk.Entry(self.frame_B_plane, width=15)
        self.entry_c_B.grid(row=2, column=1, padx=5)
        
        tk.Label(self.frame_B_plane, text="d:", bg="#FFFFFF", width=3).grid(row=2, column=2, sticky="e")
        self.entry_d_B = tk.Entry(self.frame_B_plane, width=15)
        self.entry_d_B.grid(row=2, column=3, padx=5)
        
        self.frame_B_plane.grid_remove()
    
    def _create_circle_frame_B(self):
        """T·∫°o frame ƒë∆∞·ªùng tr√≤n B"""
        self.frame_B_circle = tk.LabelFrame(
            self.main_container, text="‚≠ï NH√ìM B - ƒê∆∞·ªùng tr√≤n",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_circle.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")
        
        tk.Label(self.frame_B_circle, text="T√¢m ƒë∆∞·ªùng tr√≤n (x,y):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_center_B = tk.Entry(self.frame_B_circle, width=25)
        self.entry_center_B.grid(row=0, column=1, padx=5)
        
        tk.Label(self.frame_B_circle, text="B√°n k√≠nh:", bg="#FFFFFF").grid(row=0, column=2)
        self.entry_radius_B = tk.Entry(self.frame_B_circle, width=20)
        self.entry_radius_B.grid(row=0, column=3, padx=5)
        
        self.frame_B_circle.grid_remove()
    
    def _create_sphere_frame_B(self):
        """T·∫°o frame m·∫∑t c·∫ßu B"""
        self.frame_B_sphere = tk.LabelFrame(
            self.main_container, text="üåç NH√ìM B - M·∫∑t c·∫ßu",
            bg="#FFFFFF", fg="#A23B72", font=("Arial", 10, "bold")
        )
        self.frame_B_sphere.grid(row=2, column=0, columnspan=4, padx=10, pady=5, sticky="we")
        
        tk.Label(self.frame_B_sphere, text="T√¢m m·∫∑t c·∫ßu (x,y,z):", bg="#FFFFFF").grid(row=0, column=0)
        self.entry_sphere_center_B = tk.Entry(self.frame_B_sphere, width=25)
        self.entry_sphere_center_B.grid(row=0, column=1, padx=5)
        
        tk.Label(self.frame_B_sphere, text="B√°n k√≠nh:", bg="#FFFFFF").grid(row=0, column=2)
        self.entry_sphere_radius_B = tk.Entry(self.frame_B_sphere, width=20)
        self.entry_sphere_radius_B.grid(row=0, column=3, padx=5)
        
        self.frame_B_sphere.grid_remove()
    
    # ========== DATA EXTRACTION ==========
    def _get_input_data_A(self):
        """L·∫•y d·ªØ li·ªáu nh·∫≠p cho nh√≥m A"""
        shape = self.dropdown1_var.get()
        data = {}
        
        if shape == "ƒêi·ªÉm":
            data['point_input'] = self.entry_diem_A.get() if hasattr(self, 'entry_diem_A') else ''
        elif shape == "ƒê∆∞·ªùng th·∫≥ng":
            data['line_A1'] = self.entry_point_A.get() if hasattr(self, 'entry_point_A') else ''
            data['line_X1'] = self.entry_vector_A.get() if hasattr(self, 'entry_vector_A') else ''
        elif shape == "M·∫∑t ph·∫≥ng":
            data['plane_a'] = self.entry_a_A.get() if hasattr(self, 'entry_a_A') else ''
            data['plane_b'] = self.entry_b_A.get() if hasattr(self, 'entry_b_A') else ''
            data['plane_c'] = self.entry_c_A.get() if hasattr(self, 'entry_c_A') else ''
            data['plane_d'] = self.entry_d_A.get() if hasattr(self, 'entry_d_A') else ''
        elif shape == "ƒê∆∞·ªùng tr√≤n":
            data['circle_center'] = self.entry_center_A.get() if hasattr(self, 'entry_center_A') else ''
            data['circle_radius'] = self.entry_radius_A.get() if hasattr(self, 'entry_radius_A') else ''
        elif shape == "M·∫∑t c·∫ßu":
            data['sphere_center'] = self.entry_sphere_center_A.get() if hasattr(self, 'entry_sphere_center_A') else ''
            data['sphere_radius'] = self.entry_sphere_radius_A.get() if hasattr(self, 'entry_sphere_radius_A') else ''
        
        return data
    
    def _get_input_data_B(self):
        """L·∫•y d·ªØ li·ªáu nh·∫≠p cho nh√≥m B"""
        shape = self.dropdown2_var.get()
        data = {}
        
        if shape == "ƒêi·ªÉm":
            data['point_input'] = self.entry_diem_B.get() if hasattr(self, 'entry_diem_B') else ''
        elif shape == "ƒê∆∞·ªùng th·∫≥ng":
            data['line_A2'] = self.entry_point_B.get() if hasattr(self, 'entry_point_B') else ''
            data['line_X2'] = self.entry_vector_B.get() if hasattr(self, 'entry_vector_B') else ''
        elif shape == "M·∫∑t ph·∫≥ng":
            data['plane_a'] = self.entry_a_B.get() if hasattr(self, 'entry_a_B') else ''
            data['plane_b'] = self.entry_b_B.get() if hasattr(self, 'entry_b_B') else ''
            data['plane_c'] = self.entry_c_B.get() if hasattr(self, 'entry_c_B') else ''
            data['plane_d'] = self.entry_d_B.get() if hasattr(self, 'entry_d_B') else ''
        elif shape == "ƒê∆∞·ªùng tr√≤n":
            data['circle_center'] = self.entry_center_B.get() if hasattr(self, 'entry_center_B') else ''
            data['circle_radius'] = self.entry_radius_B.get() if hasattr(self, 'entry_radius_B') else ''
        elif shape == "M·∫∑t c·∫ßu":
            data['sphere_center'] = self.entry_sphere_center_B.get() if hasattr(self, 'entry_sphere_center_B') else ''
            data['sphere_radius'] = self.entry_sphere_radius_B.get() if hasattr(self, 'entry_sphere_radius_B') else ''
        
        return data
    
    # ========== PROCESSING METHODS ==========
    def _process_group_A(self):
        """X·ª≠ l√Ω nh√≥m A"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
            
            data_A = self._get_input_data_A()
            result = self.geometry_service.thuc_thi_A(data_A)
            self._update_result_display(f"Nh√≥m A ƒë√£ x·ª≠ l√Ω: {result}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m A: {str(e)}")
    
    def _process_group_B(self):
        """X·ª≠ l√Ω nh√≥m B"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
                
            data_B = self._get_input_data_B()
            result = self.geometry_service.thuc_thi_B(data_B)
            self._update_result_display(f"Nh√≥m B ƒë√£ x·ª≠ l√Ω: {result}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω nh√≥m B: {str(e)}")
    
    def _process_all(self):
        """Th·ª±c thi t·∫•t c·∫£ - Core function!"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return
            
            # Ki·ªÉm tra xem ƒë√£ ch·ªçn ph√©p to√°n v√† h√¨nh d·∫°ng ch∆∞a
            if not self.pheptoan_var.get():
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ph√©p to√°n!")
                return
            
            if not self.dropdown1_var.get():
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h√¨nh d·∫°ng cho nh√≥m A!")
                return
            
            # L·∫•y d·ªØ li·ªáu
            data_A = self._get_input_data_A()
            data_B = self._get_input_data_B()
            
            # X·ª≠ l√Ω
            result_A, result_B = self.geometry_service.thuc_thi_tat_ca(data_A, data_B)
            
            # Sinh k·∫øt qu·∫£ cu·ªëi c√πng
            final_result = self.geometry_service.generate_final_result()
            
            # Hi·ªÉn th·ªã "ch·ªâ 1 d√≤ng" m√£ h√≥a v·ªõi font Flexio Fx799VN (n·∫øu c√≥)
            self._show_single_line_result(final_result)
            
            # Hi·ªán n√∫t copy ƒë·ªÉ sao ch√©p k·∫øt qu·∫£
            self._show_copy_button()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói th·ª±c thi: {str(e)}")
    
    def _show_single_line_result(self, result_text: str):
        """Hi·ªÉn th·ªã duy nh·∫•t 1 d√≤ng k·∫øt qu·∫£ m√£ h√≥a v·ªõi font Flexio Fx799VN."""
        # X√≥a to√†n b·ªô v√† ch√®n ƒë√∫ng 1 d√≤ng
        self.entry_tong.delete(1.0, tk.END)
        one_line = (result_text or "").strip().splitlines()[0] if result_text else ""
        self.entry_tong.insert(tk.END, one_line)
        
        # Thi·∫øt l·∫≠p font Flexio Fx799VN n·∫øu c√≥, size 11, bold
        try:
            self.entry_tong.config(font=("Flexio Fx799VN", 11, "bold"), fg="#000000", bg="#F8F9FA")
        except Exception:
            # Fallback gi·ªØ nguy√™n n·∫øu font kh√¥ng c√≥
            self.entry_tong.config(font=("Courier New", 11, "bold"), fg="#000000", bg="#F8F9FA")
    
    def _copy_result(self):
        """Copy k·∫øt qu·∫£ m√£ h√≥a v√†o clipboard"""
        try:
            result_text = self.entry_tong.get(1.0, tk.END).strip()
            if result_text:
                self.window.clipboard_clear()
                self.window.clipboard_append(result_text)
                messagebox.showinfo("ƒê√£ copy", f"ƒê√£ copy k·∫øt qu·∫£ v√†o clipboard:\n\n{result_text}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ copy!")
        except Exception as e:
            messagebox.showerror("L·ªói Copy", f"L·ªói copy k·∫øt qu·∫£: {str(e)}")
    
    def _show_copy_button(self):
        """Hi·ªÉn th·ªã n√∫t copy khi c√≥ k·∫øt qu·∫£"""
        if hasattr(self, 'btn_copy_result'):
            self.btn_copy_result.grid()
    
    def _hide_copy_button(self):
        """·∫®n n√∫t copy khi kh√¥ng c√≥ k·∫øt qu·∫£"""
        if hasattr(self, 'btn_copy_result'):
            self.btn_copy_result.grid_remove()
    
    # ========== SIMPLIFIED EXCEL METHODS - FILENAME ONLY ON IMPORT ==========
    def _import_excel(self):
        """Ch·ªâ ch·ªçn file v√† l∆∞u l·∫°i T√äN FILE, KH√îNG ƒë·ªçc n·ªôi dung"""
        try:
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file Excel",
                filetypes=[("Excel files", "*.xlsx *.xls")]
            )
            
            if not file_path:
                return
            
            # Ki·ªÉm tra extension
            file_ext = os.path.splitext(file_path)[1].lower()
            if file_ext not in ['.xlsx', '.xls']:
                messagebox.showerror("L·ªói", "Ch·ªâ h·ªó tr·ª£ file Excel (.xlsx, .xls)!")
                return
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(file_path):
                messagebox.showerror("L·ªói", "File kh√¥ng t·ªìn t·∫°i!")
                return
            
            # L∆∞u ch·ªâ th√¥ng tin t√™n file, KH√îNG ƒë·ªçc n·ªôi dung
            self.imported_file_path = file_path
            self.imported_file_name = os.path.basename(file_path)
            self.imported_data = True
            self.manual_data_entered = False
            self.is_large_file = False  # Reset, s·∫Ω detect ·ªü b∆∞·ªõc process
            
            # Clear v√† kh√≥a c√°c input th·ªß c√¥ng
            self._clear_and_lock_inputs()
            
            # Hi·ªÉn th·ªã import buttons
            self._show_import_buttons()
            
            # ·∫®n n√∫t copy v√¨ ƒëang ·ªü import mode
            self._hide_copy_button()
            
            # C·∫≠p nh·∫≠t status ƒë∆°n gi·∫£n (ch·ªâ t√™n file)
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            status_message = (
                f"üìÅ ƒê√£ import file: {self.imported_file_name}\n"
            )
            
            self.excel_status_label.config(text=f"Excel: üìÅ {self.imported_file_name[:15]}...")
            self._update_result_display(status_message)
        
        except Exception as e:
            messagebox.showerror("L·ªói Import", f"L·ªói import Excel: {str(e)}")

    def _process_excel_batch(self):
        """ƒê·ªçc v√† x·ª≠ l√Ω file Excel (ch·ªâ ƒë·ªçc ·ªü b∆∞·ªõc n√†y)"""
        try:
            if not self.imported_data or not self.imported_file_path:
                messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a import file Excel n√†o!")
                return
            
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a s·∫µn s√†ng!")
                return
            
            # Ki·ªÉm tra file v·∫´n t·ªìn t·∫°i
            if not os.path.exists(self.imported_file_path):
                messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i: {self.imported_file_path}")
                return
            
            original_name = os.path.splitext(self.imported_file_name)[0]
            default_output = f"{original_name}_encoded_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="Ch·ªçn n∆°i l∆∞u k·∫øt qu·∫£",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=default_output
            )
            if not output_path:
                return
            
            # L·∫•y setting hi·ªán t·∫°i
            shape_a = self.dropdown1_var.get()
            shape_b = self.dropdown2_var.get() if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"] else None
            operation = self.pheptoan_var.get()
            dimension_a = self.kich_thuoc_A_var.get()
            dimension_b = self.kich_thuoc_B_var.get()
            
            # T·∫°o progress window
            progress_window = self._create_progress_window("ƒêang x·ª≠ l√Ω file Excel...")
            
            def progress_callback(progress, processed, total, errors):
                if hasattr(self, 'progress_var') and not self.processing_cancelled:
                    try:
                        self.progress_var.set(progress)
                        memory_usage = self._get_memory_usage()
                        progress_text = f"ƒêang x·ª≠ l√Ω: {processed:,}/{total:,} d√≤ng"
                        self.progress_label.config(text=progress_text)
                        
                        if memory_usage > 800:
                            self.memory_status_label.config(text=f"üíæ Memory: {memory_usage:.1f}MB (üî• High)", fg="#F44336")
                        elif memory_usage > 500:
                            self.memory_status_label.config(text=f"üíæ Memory: {memory_usage:.1f}MB (‚ö†Ô∏è Medium)", fg="#FF9800")
                        else:
                            self.memory_status_label.config(text=f"üíæ Memory: {memory_usage:.1f}MB (‚úÖ OK)", fg="#4CAF50")
                        
                        progress_window.update()
                    except Exception:
                        pass
            
            def process_thread():
                try:
                    results, output_file, success_count, error_count = self.geometry_service.process_excel_batch(
                        self.imported_file_path, shape_a, shape_b, operation,
                        dimension_a, dimension_b, output_path, progress_callback
                    )
                    
                    if not self.processing_cancelled:
                        progress_window.destroy()
                        
                        result_message = (
                            f"üéâ Ho√†n th√†nh x·ª≠ l√Ω Excel!\n\n"
                            f"üìÅ File g·ªëc: {self.imported_file_name}\n"
                            f"üìÅ Output: {os.path.basename(output_file)}\n"
                            f"‚úÖ Success: {success_count:,} rows\n"
                            f"‚ùå Errors: {error_count:,} rows\n"
                            f"üíæ Peak memory: {self._get_memory_usage():.1f}MB\n\n"
                        )
                        if isinstance(results, list) and len(results) > 0:
                            result_message += f"üìù Sample result:\n{results[0][:80]}..."
                        else:
                            result_message += "üìù Results written directly to file for memory efficiency"
                        
                        self._update_result_display(result_message)
                        messagebox.showinfo("Ho√†n th√†nh", 
                            f"üéâ X·ª≠ l√Ω Excel th√†nh c√¥ng!\n\n"
                            f"‚úÖ Processed: {success_count:,} rows\n"
                            f"‚ùå Errors: {error_count:,} rows\n\n"
                            f"File ƒë√£ l∆∞u:\n{output_file}")
                
                except Exception as e:
                    if not self.processing_cancelled:
                        progress_window.destroy()
                        messagebox.showerror("L·ªói X·ª≠ l√Ω", f"L·ªói x·ª≠ l√Ω Excel: {str(e)}")
            
            # Start processing thread
            thread = threading.Thread(target=process_thread)
            thread.daemon = True
            thread.start()
        
        except Exception as e:
            messagebox.showerror("L·ªói X·ª≠ l√Ω", f"L·ªói x·ª≠ l√Ω Excel: {str(e)}")
    
    def _create_progress_window(self, title):
        """Create progress dialog window"""
        progress_window = tk.Toplevel(self.window)
        progress_window.title(title)
        progress_window.geometry("450x180")
        progress_window.resizable(False, False)
        progress_window.grab_set()
        progress_window.transient(self.window)
        
        tk.Label(progress_window, text=title, font=("Arial", 12, "bold")).pack(pady=10)
        
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window, variable=self.progress_var, 
            maximum=100, length=350, mode='determinate'
        )
        progress_bar.pack(pady=10)
        
        self.progress_label = tk.Label(progress_window, text="Chu·∫©n b·ªã...", font=("Arial", 10))
        self.progress_label.pack(pady=5)
        
        warning_label = tk.Label(
            progress_window, 
            text="‚ö†Ô∏è ƒê·ª´ng ƒë√≥ng c·ª≠a s·ªï! ƒêang x·ª≠ l√Ω .",
            font=("Arial", 8), fg="#FF9800"
        )
        warning_label.pack(pady=5)
        
        def cancel_processing():
            self.processing_cancelled = True
            messagebox.showinfo("ƒê√£ h·ªßy", "ƒê√£ y√™u c·∫ßu h·ªßy x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i...")
            progress_window.after(2000, progress_window.destroy)
        
        tk.Button(progress_window, text="üõë H·ªßy", command=cancel_processing,
                 bg="#F44336", fg="white", font=("Arial", 10)).pack(pady=10)
        
        return progress_window
    
    def _export_excel(self):
        """Xu·∫•t k·∫øt qu·∫£ ra Excel"""
        try:
            if not self.geometry_service:
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a s·∫µn s√†ng!")
                return
            
            final_result = self.geometry_service.generate_final_result()
            if not final_result:
                messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ xu·∫•t!\n\nVui l√≤ng th·ª±c thi t√≠nh to√°n tr∆∞·ªõc.")
                return
            
            default_name = f"geometry_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="Xu·∫•t k·∫øt qu·∫£ ra Excel",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=default_name
            )
            
            if not output_path:
                return
            
            exported_file = self.geometry_service.export_single_result(output_path)
            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"K·∫øt qu·∫£ ƒë√£ l∆∞u t·∫°i:\n{exported_file}")
            
        except Exception as e:
            messagebox.showerror("L·ªói Xu·∫•t", f"L·ªói xu·∫•t Excel: {str(e)}")
    
    def _create_template(self):
        """Create Excel template"""
        try:
            shape_a = self.dropdown1_var.get()
            shape_b = self.dropdown2_var.get() if self.pheptoan_var.get() not in ["Di·ªán t√≠ch", "Th·ªÉ t√≠ch"] else None
            
            if not shape_a:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h√¨nh d·∫°ng tr∆∞·ªõc!")
                return
            
            template_name = f"template_{shape_a}" + (f"_{shape_b}" if shape_b else "") + f"_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="L∆∞u template Excel",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=template_name
            )
            
            if not output_path:
                return
            
            template_file = self.geometry_service.create_excel_template_for_geometry(shape_a, shape_b, output_path)
            
            messagebox.showinfo("T·∫°o template th√†nh c√¥ng", 
                f"Template Excel ƒë√£ t·∫°o t·∫°i:\n{template_file}\n\n"
                f"B·∫°n c√≥ th·ªÉ ƒëi·ªÅn d·ªØ li·ªáu v√†o template n√†y r·ªìi import l·∫°i.\n\n"
                f"üí° Tip: Template h·ªó tr·ª£ ƒë·∫øn 250,000 d√≤ng v·ªõi anti-crash system!")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói t·∫°o template: {str(e)}")
    
    def _quit_import_mode(self):
        """Tho√°t ch·∫ø ƒë·ªô import v√† quay l·∫°i manual"""
        try:
            result = messagebox.askyesno("Tho√°t ch·∫ø ƒë·ªô import", 
                "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ch·∫ø ƒë·ªô import Excel v√† quay l·∫°i nh·∫≠p th·ªß c√¥ng?")
            
            if result:
                self.imported_data = False
                self.imported_file_path = ""
                self.imported_file_name = ""
                self.manual_data_entered = False
                self.is_large_file = False
                
                self._unlock_and_clear_inputs()
                self._hide_action_buttons()
                
                self._show_single_line_result("")
                self.excel_status_label.config(text="üìä Excel: ‚úÖ Ready")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói tho√°t ch·∫ø ƒë·ªô import: {str(e)}")
    
    def _clear_and_lock_inputs(self):
        """Clear and lock all input fields when Excel is imported"""
        entries = self._get_all_input_entries()
        for entry in entries:
            try:
                entry.delete(0, tk.END)
                entry.config(state='disabled', bg='#E0E0E0')
            except:
                pass
    
    def _unlock_and_clear_inputs(self):
        """Unlock and clear all input fields for manual input"""
        entries = self._get_all_input_entries()
        for entry in entries:
            try:
                entry.config(state='normal', bg='white')
                entry.delete(0, tk.END)
            except:
                pass
    
    def _update_result_display(self, message):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi m√†u s·∫Øc (d√πng cho th√¥ng b√°o nhi·ªÅu d√≤ng)"""
        self.entry_tong.delete(1.0, tk.END)
        self.entry_tong.insert(tk.END, message)
        
        # Gi·ªØ font m·∫∑c ƒë·ªãnh cho th√¥ng b√°o
        try:
            self.entry_tong.config(font=("Courier New", 9), fg="black")
        except Exception:
            pass
        
        if "L·ªói" in message or "l·ªói" in message:
            self.entry_tong.config(bg="#FFEBEE", fg="#D32F2F")
        elif "ƒê√£ import" in message or "Ho√†n th√†nh" in message:
            self.entry_tong.config(bg="#E8F5E8", fg="#388E3C")
        elif "ƒêang x·ª≠ l√Ω" in message:
            self.entry_tong.config(bg="#FFF3E0", fg="#F57C00")
        else:
            self.entry_tong.config(bg="#F8F9FA", fg="#2E86AB")
    
    def _show_ready_message(self):
        """Hi·ªÉn th√¥ng b√°o s·∫µn s√†ng"""
        if self.geometry_service:
            message = " "
        else:
            message = "‚ö†Ô∏è GeometryService kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c.\nVui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t!"
        
        self.entry_tong.insert(tk.END, message)

    def _setup_control_frame(self):
        """Setup control frame v·ªõi buttons v√† result display"""
        self.frame_tong = tk.LabelFrame(
            self.main_container, text="üéâ K·∫æT QU·∫¢ & ƒêI·ªÄU KHI·ªÇN",
            bg="#FFFFFF", font=("Arial", 10, "bold")
        )
        self.frame_tong.grid(row=8, column=0, columnspan=4, padx=10, pady=10, sticky="we")

        # Text widget hi·ªÉn th·ªã k·∫øt qu·∫£ (ch·ªâ 1 d√≤ng khi manual)
        self.entry_tong = tk.Text(
            self.main_container,
            width=80, height=2,  # ch·ªâ c·∫ßn 1-2 d√≤ng
            font=("Courier New", 9), wrap=tk.NONE,
            bg="#F8F9FA", fg="black",
            relief="solid", bd=1, padx=5, pady=5
        )
        self.entry_tong.grid(row=9, column=0, columnspan=4, padx=5, pady=5, sticky="we")

        # N√∫t Import Excel
        self.btn_import_excel = tk.Button(
            self.frame_tong, text="üìÅ Import Excel (Fast Select - 250k limit!)",
            command=self._import_excel,
            bg="#FF9800", fg="white", font=("Arial", 9, "bold")
        )
        self.btn_import_excel.grid(row=0, column=0, columnspan=4, pady=5, sticky="we")

        # Frame cho n√∫t th·ªß c√¥ng
        self.frame_buttons_manual = tk.Frame(self.frame_tong, bg="#FFFFFF")
        self.frame_buttons_manual.grid(row=1, column=0, columnspan=4, pady=5, sticky="we")

        tk.Button(self.frame_buttons_manual, text="üîÑ X·ª≠ l√Ω Nh√≥m A",
                  command=self._process_group_A,
                  bg="#2196F3", fg="white", font=("Arial", 9)).grid(row=0, column=0, padx=5)
        tk.Button(self.frame_buttons_manual, text="üîÑ X·ª≠ l√Ω Nh√≥m B",
                  command=self._process_group_B,
                  bg="#2196F3", fg="white", font=("Arial", 9)).grid(row=0, column=1, padx=5)
        tk.Button(self.frame_buttons_manual, text="üöÄ Th·ª±c thi t·∫•t c·∫£",
                  command=self._process_all,
                  bg="#4CAF50", fg="white", font=("Arial", 9, "bold")).grid(row=0, column=2, padx=5)
        tk.Button(self.frame_buttons_manual, text="üíæ Xu·∫•t Excel",
                  command=self._export_excel,
                  bg="#FF9800", fg="white", font=("Arial", 9, "bold")).grid(row=0, column=3, padx=5)
        
        # Frame cho n√∫t import mode
        self.frame_buttons_import = tk.Frame(self.frame_tong, bg="#FFFFFF")
        self.frame_buttons_import.grid(row=1, column=0, columnspan=4, pady=5, sticky="we")
        
        tk.Button(self.frame_buttons_import, text="üî• X·ª≠ l√Ω File Excel",
                  command=self._process_excel_batch,
                  bg="#F44336", fg="white", font=("Arial", 9, "bold")).grid(row=0, column=0, padx=5)
        tk.Button(self.frame_buttons_import, text="üìÅ Import File Kh√°c",
                  command=self._import_excel,
                  bg="#2196F3", fg="white", font=("Arial", 9)).grid(row=0, column=1, padx=5)
        tk.Button(self.frame_buttons_import, text="üìù T·∫°o Template",
                  command=self._create_template,
                  bg="#9C27B0", fg="white", font=("Arial", 9)).grid(row=0, column=2, padx=5)
        tk.Button(self.frame_buttons_import, text="‚Ü©Ô∏è Quay l·∫°i",
                  command=self._quit_import_mode,
                  bg="#607D8B", fg="white", font=("Arial", 9)).grid(row=0, column=3, padx=5)
        
        # Initially hide import buttons
        self.frame_buttons_import.grid_remove()
        self.frame_buttons_manual.grid_remove()


if __name__ == "__main__":
    root = tk.Tk()
    app = GeometryView(root)
    root.mainloop()
