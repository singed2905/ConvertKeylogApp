import tkinter as tk
from tkinter import ttk, messagebox

class EquationView:
    def __init__(self, window, config=None):
        self.window = window
        self.window.title("Equation Mode - Gi·∫£i H·ªá Ph∆∞∆°ng Tr√¨nh Th·ª±c")
        self.window.geometry("850x1050")
        self.window.configure(bg="#F5F5F5")

        # L∆∞u config ƒë∆∞·ª£c truy·ªÅn v√†o
        self.config = config or {}

        # Kh·ªüi t·∫°o bi·∫øn
        self.so_an_var = tk.StringVar(value="2")
        self.phien_ban_var = tk.StringVar()

        # Bi·∫øn l∆∞u c√°c √¥ nh·∫≠p li·ªáu v√† k·∫øt qu·∫£
        self.input_entries = []
        self.result_entries = []

        # Tr·∫°ng th√°i hi·ªán t·∫°i
        self.is_imported_mode = False
        self.has_manual_data = False

        # Load danh s√°ch phi√™n b·∫£n t·ª´ config
        self.phien_ban_list = self._get_available_versions()
        self.phien_ban_var.set(self.phien_ban_list[0] if self.phien_ban_list else "fx799")

        self._setup_ui()
        self._update_input_fields()
        self._update_button_visibility()
    
    def _get_available_versions(self):
        """L·∫•y danh s√°ch phi√™n b·∫£n t·ª´ config ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh"""
        try:
            if self.config and 'common' in self.config and 'versions' in self.config['common']:
                versions_data = self.config['common']['versions']
                if 'versions' in versions_data:
                    return versions_data['versions']
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load versions t·ª´ config: {e}")
        
        # Fallback n·∫øu kh√¥ng c√≥ config
        return ["fx799", "fx800", "fx801", "fx802", "fx803"]
    
    def _get_equation_prefixes(self):
        """L·∫•y prefixes cho equation t·ª´ config"""
        try:
            if self.config and 'equation' in self.config and 'prefixes' in self.config['equation']:
                prefixes_data = self.config['equation']['prefixes']
                if 'versions' in prefixes_data:
                    return prefixes_data['versions']
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load equation prefixes t·ª´ config: {e}")
        
        return None

    def _setup_ui(self):
        # Frame ch√≠nh v·ªõi scrollbar
        main_frame = tk.Frame(self.window, bg="#F5F5F5")
        main_frame.pack(fill="both", expand=True, padx=20, pady=15)

        # Ti√™u ƒë·ªÅ
        title_label = tk.Label(
            main_frame,
            text="üß† EQUATION MODE v2.0 - GI·∫¢I H·ªÜ PH∆ØNG TR√åNH",
            font=("Arial", 18, "bold"),
            bg="#F5F5F5",
            fg="#2E7D32"
        )
        title_label.pack(pady=(0, 15))

        # === KHUNG L·ª∞A CH·ªå4N THAM S·ªê ===
        control_frame = tk.LabelFrame(
            main_frame,
            text="‚öôÔ∏è THI·∫æ4T L·∫¨P PH∆ØNG TR√åNH",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#1B5299",
            bd=2,
            relief="groove"
        )
        control_frame.pack(fill="x", pady=10, padx=10)

        # D√≤ng 1: Ch·ªçn s·ªë ·∫©n
        row1 = tk.Frame(control_frame, bg="#FFFFFF")
        row1.pack(fill="x", padx=15, pady=10)

        tk.Label(
            row1,
            text="S·ªë ·∫©n:",
            font=("Arial", 10, "bold"),
            bg="#FFFFFF",
            fg="#333333",
            width=12
        ).pack(side="left")

        so_an_menu = ttk.Combobox(
            row1,
            textvariable=self.so_an_var,
            values=["2", "3", "4"],
            state="readonly",
            width=15,
            font=("Arial", 10)
        )
        so_an_menu.pack(side="left", padx=5)
        so_an_menu.bind("<<ComboboxSelected>>", self._on_so_an_changed)

        # D√≤ng 2: Ch·ªçn phi√™n b·∫£n
        row2 = tk.Frame(control_frame, bg="#FFFFFF")
        row2.pack(fill="x", padx=15, pady=10)

        tk.Label(
            row2,
            text="Phi√™n b·∫£n m√°y:",
            font=("Arial", 10, "bold"),
            bg="#FFFFFF",
            fg="#333333",
            width=12
        ).pack(side="left")

        phien_ban_menu = ttk.Combobox(
            row2,
            textvariable=self.phien_ban_var,
            values=self.phien_ban_list,
            state="readonly",
            width=15,
            font=("Arial", 10)
        )
        phien_ban_menu.pack(side="left", padx=5)
        phien_ban_menu.bind("<<ComboboxSelected>>", self._on_phien_ban_changed)
        
        # Config status
        config_status = "Config: ‚úÖ Loaded" if self.config else "Config: ‚ö†Ô∏è Fallback"
        tk.Label(
            row2,
            text=config_status,
            font=("Arial", 8),
            bg="#FFFFFF",
            fg="#666666"
        ).pack(side="right", padx=20)

        # === KHUNG H∆Ø·ªöNG D·∫™N ===
        guide_frame = tk.LabelFrame(
            main_frame,
            text="üí° H∆Ø·ªöNG D·∫™N NH·∫¨P LI·ªÜU",
            font=("Arial", 10, "bold"),
            bg="#E3F2FD",
            fg="#1565C0",
            bd=1,
            relief="solid"
        )
        guide_frame.pack(fill="x", pady=5, padx=10)

        guide_text = (
            "‚Ä¢ H·ªó tr·ª£ bi·ªÉu th·ª©c: sqrt(5), sin(pi/2), 1/2, 2^3, log(10), v.v.\n"
            "‚Ä¢ Nh·∫≠p h·ªá s·ªë c√°ch nhau b·∫±ng d·∫•u ph·∫©y\n"
            "‚Ä¢ √î tr·ªëng s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅn s·ªë 0"
        )

        guide_label = tk.Label(
            guide_frame,
            text=guide_text,
            font=("Arial", 9),
            bg="#E3F2FD",
            fg="#333333",
            justify="left"
        )
        guide_label.pack(padx=10, pady=8)

        # === KHUNG NH·∫¨P LI·ªÜU ===
        self.input_frame = tk.LabelFrame(
            main_frame,
            text="üìù NH·∫¨P H·ªÜ S·ªê PH∆ØNG TR√åNH",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#1B5299",
            bd=2,
            relief="groove"
        )
        self.input_frame.pack(fill="x", pady=10, padx=10)

        # === KHUNG K·∫æT QU·∫¢ M√É H√ìA ===
        self.result_frame = tk.LabelFrame(
            main_frame,
            text="üîê K·∫æT QU·∫¢ M√É H√ìA",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#7B1FA2",
            bd=2,
            relief="groove"
        )
        self.result_frame.pack(fill="x", pady=10, padx=10)

        # === KHUNG K·∫æT QU·∫¢ NGHI·ªÜM ===
        self.frame_nghiem = tk.LabelFrame(
            main_frame,
            text="üéØ K·∫æT QU·∫¢ NGHI·ªÜM",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#D35400",
            bd=2,
            relief="groove"
        )
        self.frame_nghiem.pack(fill="x", pady=10, padx=10)

        self.entry_nghiem = tk.Entry(
            self.frame_nghiem,
            width=80,
            font=("Arial", 10),
            justify="center"
        )
        self.entry_nghiem.pack(padx=15, pady=12, fill="x")
        self.entry_nghiem.insert(0, "Ch∆∞a c√≥ k·∫øt qu·∫£ nghi·ªám")
        self.entry_nghiem.config(bg="#FFF9E6", fg="#FF6F00")

        # === KHUNG K·∫æT QU·∫¢ T·ªîNG ===
        self.frame_tong = tk.LabelFrame(
            main_frame,
            text="üì¶ K·∫æT QU·∫¢ T·ªîNG (CHO M√ÅY T√çNH)",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#2E7D32",
            bd=2,
            relief="groove"
        )
        self.frame_tong.pack(fill="x", pady=10, padx=10)

        self.entry_tong = tk.Entry(
            self.frame_tong,
            width=80,
            font=("Courier New", 9),
            justify="center"
        )
        self.entry_tong.pack(padx=15, pady=12, fill="x")
        
        # Hi·ªÉn th·ªã config info trong k·∫øt qu·∫£ t·ªïng
        config_info = "Config loaded successfully" if self.config else "Using fallback config"
        self.entry_tong.insert(0, f"Equation Mode v2.0 - {config_info}")
        self.entry_tong.config(bg="#F1F8E9")

        # === KHUNG N√öT CH·ª®C NƒÇNG ===
        button_frame = tk.Frame(main_frame, bg="#F5F5F5")
        button_frame.pack(fill="x", pady=20)

        # N√∫t Import Excel (ban ƒë·∫ßu hi·ªÉn th·ªã)
        self.btn_import = tk.Button(
            button_frame,
            text="üìÅ Import Excel",
            bg="#FF9800",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._placeholder_action
        )
        self.btn_import.pack(side="left", padx=5)

        # N√∫t X·ª≠ l√Ω (lu√¥n hi·ªÉn th·ªã)
        self.btn_process = tk.Button(
            button_frame,
            text="üîÑ X·ª≠ l√Ω & Gi·∫£i nghi·ªám",
            bg="#2196F3",
            fg="white",
            font=("Arial", 10, "bold"),
            width=16,
            height=1,
            command=self._placeholder_action
        )
        self.btn_process.pack(side="left", padx=5)

        # N√∫t Import File Excel Kh√°c (ban ƒë·∫ßu ·∫©n)
        self.btn_import_other = tk.Button(
            button_frame,
            text="üìÇ Import File Kh√°c",
            bg="#9C27B0",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._placeholder_action
        )

        # N√∫t Quay l·∫°i (ban ƒë·∫ßu ·∫©n)
        self.btn_quay_lai = tk.Button(
            button_frame,
            text="‚Ü©Ô∏è Quay l·∫°i",
            bg="#607D8B",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._placeholder_action
        )

        # === TH√îNG B√ÅO TR·∫†NG TH√ÅI ===
        self.status_label = tk.Label(
            main_frame,
            text="üü¢ S·∫µn s√†ng nh·∫≠p li·ªáu v√† gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh",
            font=("Arial", 10, "bold"),
            bg="#F5F5F5",
            fg="#2E7D32"
        )
        self.status_label.pack(pady=10)

        # N√∫t ƒë√≥ng
        close_btn = tk.Button(
            main_frame,
            text="ƒê√≥ng",
            command=self.window.destroy,
            bg="#F44336",
            fg="white",
            font=("Arial", 10, "bold"),
            width=15,
            height=1
        )
        close_btn.pack(pady=10)

        # Footer
        footer_label = tk.Label(
            main_frame,
            text="Phi√™n b·∫£n: v2.0 Gi·∫£i nghi·ªám th·ª±c ‚Ä¢ H·ªó tr·ª£ bi·ªÉu th·ª©c ph·ª©c t·∫°p ‚Ä¢ Config-driven",
            font=("Arial", 8),
            bg="#F5F5F5",
            fg="#666666"
        )
        footer_label.pack(side="bottom", pady=5)

    def _on_so_an_changed(self, event=None):
        """C·∫≠p nh·∫≠t s·ªë √¥ nh·∫≠p li·ªáu khi s·ªë ·∫©n thay ƒë·ªïi"""
        self._update_input_fields()
        self.status_label.config(text=f"ƒê√£ ch·ªçn h·ªá {self.so_an_var.get()} ph∆∞∆°ng tr√¨nh {self.so_an_var.get()} ·∫©n")

    def _on_phien_ban_changed(self, event=None):
        """C·∫≠p nh·∫≠t khi phi√™n b·∫£n thay ƒë·ªïi"""
        selected_version = self.phien_ban_var.get()
        # L·∫•y prefix t·ª´ config n·∫øu c√≥
        prefixes = self._get_equation_prefixes()
        prefix_info = ""
        if prefixes and selected_version in prefixes:
            prefix_info = f" - Prefix: {prefixes[selected_version]['base_prefix']}"
        
        self.status_label.config(text=f"ƒê√£ ch·ªçn phi√™n b·∫£n: {selected_version}{prefix_info}")

    def _update_input_fields(self):
        """C·∫≠p nh·∫≠t c√°c √¥ nh·∫≠p li·ªáu v√† k·∫øt qu·∫£ d·ª±a tr√™n s·ªë ·∫©n"""
        try:
            so_an = int(self.so_an_var.get())

            # X√≥a c√°c widget c≈©
            for widget in self.input_frame.winfo_children():
                widget.destroy()
            for widget in self.result_frame.winfo_children():
                widget.destroy()

            self.input_entries = []
            self.result_entries = []

            # T·∫°o c√°c √¥ nh·∫≠p li·ªáu
            tk.Label(
                self.input_frame,
                text=f"Nh·∫≠p {so_an + 1} h·ªá s·ªë cho m·ªói ph∆∞∆°ng tr√¨nh (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):",
                font=("Arial", 9, "bold"),
                bg="#FFFFFF",
                fg="#333333"
            ).pack(anchor="w", padx=15, pady=8)

            # T·∫°o label v√† entry cho t·ª´ng ph∆∞∆°ng tr√¨nh
            labels = self._get_input_labels(so_an)
            for i, label_text in enumerate(labels):
                row_frame = tk.Frame(self.input_frame, bg="#FFFFFF")
                row_frame.pack(fill="x", padx=15, pady=6)

                tk.Label(
                    row_frame,
                    text=label_text,
                    font=("Arial", 9),
                    bg="#FFFFFF",
                    fg="#333333",
                    width=35
                ).pack(side="left")

                entry = tk.Entry(row_frame, width=45, font=("Arial", 9))
                entry.pack(side="left", padx=5, fill="x", expand=True)
                entry.bind('<KeyRelease>', self._on_manual_input)
                self.input_entries.append(entry)

            # T·∫°o c√°c √¥ k·∫øt qu·∫£ m√£ h√≥a
            tk.Label(
                self.result_frame,
                text=f"K·∫øt qu·∫£ m√£ h√≥a ({self._get_result_count(so_an)} h·ªá s·ªë):",
                font=("Arial", 9, "bold"),
                bg="#FFFFFF",
                fg="#333333"
            ).pack(anchor="w", padx=15, pady=8)

            # T·∫°o grid cho √¥ k·∫øt qu·∫£
            if so_an == 2:
                labels_2an = ["a11", "a12", "c1", "a21", "a22", "c2"]
                self._create_result_grid(labels_2an, 2, 3)
            elif so_an == 3:
                labels_3an = ["a11", "a12", "a13", "c1", "a21", "a22", "a23", "c2", "a31", "a32", "a33", "c3"]
                self._create_result_grid(labels_3an, 3, 4)
            elif so_an == 4:
                labels_4an = ["a11", "a12", "a13", "a14", "c1", "a21", "a22", "a23", "a24", "c2",
                              "a31", "a32", "a33", "a34", "c3", "a41", "a42", "a43", "a44", "c4"]
                self._create_result_grid(labels_4an, 4, 5)

        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t √¥ nh·∫≠p li·ªáu: {e}")

    def _create_result_grid(self, labels, rows, cols):
        """T·∫°o grid cho k·∫øt qu·∫£ m√£ h√≥a"""
        for row in range(rows):
            row_frame = tk.Frame(self.result_frame, bg="#FFFFFF")
            row_frame.pack(fill="x", padx=15, pady=4)

            tk.Label(
                row_frame,
                text=f"PT {row + 1}:",
                font=("Arial", 8, "bold"),
                bg="#FFFFFF",
                fg="#333333",
                width=6
            ).pack(side="left", padx=2)

            for col in range(cols):
                idx = row * cols + col
                if idx < len(labels):
                    # Label h·ªá s·ªë
                    label_frame = tk.Frame(row_frame, bg="#FFFFFF")
                    label_frame.pack(side="left", padx=2)

                    tk.Label(
                        label_frame,
                        text=labels[idx] + ":",
                        font=("Arial", 8, "bold"),
                        bg="#FFFFFF",
                        fg="#7B1FA2",
                        width=4
                    ).pack(side="top")

                    # Entry k·∫øt qu·∫£
                    entry = tk.Entry(label_frame, width=12, font=("Arial", 8), state='readonly', bg="#F3E5F5")
                    entry.pack(side="top", padx=2)
                    self.result_entries.append(entry)

    def _get_input_labels(self, so_an):
        """L·∫•y danh s√°ch label cho c√°c √¥ nh·∫≠p li·ªáu"""
        config = {
            2: [
                "Ph∆∞∆°ng tr√¨nh 1 (a‚ÇÅ‚ÇÅ, a‚ÇÅ‚ÇÇ, c‚ÇÅ):",
                "Ph∆∞∆°ng tr√¨nh 2 (a‚ÇÇ‚ÇÅ, a‚ÇÇ‚ÇÇ, c‚ÇÇ):"
            ],
            3: [
                "Ph∆∞∆°ng tr√¨nh 1 (a‚ÇÅ‚ÇÅ, a‚ÇÅ‚ÇÇ, a‚ÇÅ‚ÇÉ, c‚ÇÅ):",
                "Ph∆∞∆°ng tr√¨nh 2 (a‚ÇÇ‚ÇÅ, a‚ÇÇ‚ÇÇ, a‚ÇÇ‚ÇÉ, c‚ÇÇ):",
                "Ph∆∞∆°ng tr√¨nh 3 (a‚ÇÉ‚ÇÅ, a‚ÇÉ‚ÇÇ, a‚ÇÉ‚ÇÉ, c‚ÇÉ):"
            ],
            4: [
                "Ph∆∞∆°ng tr√¨nh 1 (a‚ÇÅ‚ÇÅ, a‚ÇÅ‚ÇÇ, a‚ÇÅ‚ÇÉ, a‚ÇÅ‚ÇÑ, c‚ÇÅ):",
                "Ph∆∞∆°ng tr√¨nh 2 (a‚ÇÇ‚ÇÅ, a‚ÇÇ‚ÇÇ, a‚ÇÇ‚ÇÉ, a‚ÇÇ‚ÇÑ, c‚ÇÇ):",
                "Ph∆∞∆°ng tr√¨nh 3 (a‚ÇÉ‚ÇÅ, a‚ÇÉ‚ÇÇ, a‚ÇÉ‚ÇÉ, a‚ÇÉ‚ÇÑ, c‚ÇÉ):",
                "Ph∆∞∆°ng tr√¨nh 4 (a‚ÇÑ‚ÇÅ, a‚ÇÑ‚ÇÇ, a‚ÇÑ‚ÇÉ, a‚ÇÑ‚ÇÑ, c‚ÇÑ):"
            ]
        }
        return config.get(so_an, config[2])

    def _get_result_count(self, so_an):
        """T√≠nh s·ªë √¥ k·∫øt qu·∫£ c·∫ßn hi·ªÉn th·ªã"""
        config = {
            2: 6,  # 2 ·∫©n: 6 h·ªá s·ªë
            3: 12,  # 3 ·∫©n: 12 h·ªá s·ªë
            4: 20  # 4 ·∫©n: 20 h·ªá s·ªë
        }
        return config.get(so_an, 6)

    def _on_manual_input(self, event=None):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu th·ªß c√¥ng"""
        self.has_manual_data = True
        self.is_imported_mode = False
        self._update_button_visibility()

    def _update_button_visibility(self):
        """·∫®n ·ª©ng hi·ªÉn th·ªã n√∫t d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i"""
        # ·∫®n t·∫•t c·∫£ c√°c n√∫t tr∆∞·ªõc
        self.btn_import.pack_forget()
        self.btn_import_other.pack_forget()
        self.btn_quay_lai.pack_forget()

        if self.is_imported_mode:
            # Tr·∫°ng th√°i import t·ª´ Excel
            self.btn_import_other.pack(side="left", padx=5)
            self.btn_quay_lai.pack(side="left", padx=5)
            self.btn_process.pack(side="left", padx=5)
        elif self.has_manual_data:
            # Tr·∫°ng th√°i nh·∫≠p li·ªáu th·ªß c√¥ng
            self.btn_process.pack(side="left", padx=5)
        else:
            # Tr·∫°ng th√°i ban ƒë·∫ßu
            self.btn_import.pack(side="left", padx=5)
            self.btn_process.pack(side="left", padx=5)

    def _placeholder_action(self):
        """H√†nh ƒë·ªông placeholder"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn. Ch·ªâ l√† giao di·ªán v2.0!")


if __name__ == "__main__":
    root = tk.Tk()
    app = EquationView(root)
    root.mainloop()
