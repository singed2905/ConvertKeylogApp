import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime
import os

from services.polynomial.polynomial_service import PolynomialService
from services.polynomial.polynomial_template_generator import PolynomialTemplateGenerator

class PolynomialEquationView:
    def __init__(self, window, config=None):
        self.window = window
        self.window.title("Polynomial Equation Mode v2.1 - Fully Functional! üí™")
        self.window.geometry("900x1000")
        self.window.configure(bg="#F0F8FF")
        
        # Make window resizable
        self.window.resizable(True, True)
        self.window.minsize(800, 600)

        # Configure grid weights for responsive behavior
        self.window.grid_rowconfigure(0, weight=1)
        self.window.grid_columnconfigure(0, weight=1)

        # Config v√† state management
        self.config = config or {}
        self.manual_data_entered = False
        self.has_result = False
        self.is_imported_mode = False

        # Variables
        self.bac_phuong_trinh_var = tk.StringVar(value="2")
        self.phien_ban_var = tk.StringVar()
        self.coefficient_entries = []
        self.root_entries = []

        # Load configuration
        self.phien_ban_list = self._get_available_versions()
        self.phien_ban_var.set(self.phien_ban_list[0] if self.phien_ban_list else "fx799")
        
        # Initialize polynomial service
        self.polynomial_service = None
        self._initialize_service()

        # Setup UI
        self._setup_ui()
        self._update_input_fields()
        self._update_button_visibility()
        
        # Bind input detection
        self.window.after(1000, self._setup_input_bindings)

    def _initialize_service(self):
        """Initialize PolynomialService"""
        try:
            self.polynomial_service = PolynomialService(self.config)
            self.polynomial_service.set_degree(int(self.bac_phuong_trinh_var.get()))
            self.polynomial_service.set_version(self.phien_ban_var.get())
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ kh·ªüi t·∫°o PolynomialService: {e}")
            self.polynomial_service = None
    
    def _get_available_versions(self):
        """L·∫•y danh s√°ch phi√™n b·∫£n t·ª´ config ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh"""
        try:
            if self.config and 'common' in self.config and 'versions' in self.config['common']:
                versions_data = self.config['common']['versions']
                if 'versions' in versions_data:
                    return versions_data['versions']
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load versions t·ª´ config: {e}")
        
        # Fallback n·∫øu kh√¥ng c√≥ config
        return ["fx799", "fx991", "fx570", "fx580", "fx115"]
    
    def _get_polynomial_config(self):
        """L·∫•y polynomial config t·ª´ config"""
        try:
            if self.config and 'polynomial' in self.config:
                return self.config['polynomial']
        except Exception as e:
            print(f"Warning: Kh√¥ng th·ªÉ load polynomial config: {e}")
        
        return None

    # ========== UI SETUP ==========
    def _setup_ui(self):
        """Setup giao di·ªán ch√≠nh"""
        # Container ch√≠nh v·ªõi scrollbar
        main_container = tk.Frame(self.window, bg="#F0F8FF")
        main_container.pack(fill="both", expand=True, padx=15, pady=10)

        # === HEADER ===
        self._create_header(main_container)

        # === CONTROL PANEL ===
        self._create_control_panel(main_container)

        # === QUICK ACTIONS ===
        self._create_quick_actions(main_container)

        # === H∆Ø·ªöNG D·∫™N ===
        self._create_guide_section(main_container)

        # === NH·∫¨P H·ªÜ S·ªê ===
        self._create_input_section(main_container)

        # === K·∫æT QU·∫¢ NGHI·ªÜM ===
        self._create_roots_section(main_container)

        # === K·∫æT QU·∫¢ T·ªîNG ===
        self._create_final_result_section(main_container)

        # === CONTROL BUTTONS ===
        self._create_control_buttons(main_container)

        # === STATUS BAR ===
        self._create_status_bar(main_container)

    def _create_header(self, parent):
        """T·∫°o header v·ªõi title v√† icon"""
        header_frame = tk.Frame(parent, bg="#1E3A8A", height=80)
        header_frame.pack(fill="x", pady=(0, 15))
        header_frame.pack_propagate(False)

        # Icon v√† Title
        title_frame = tk.Frame(header_frame, bg="#1E3A8A")
        title_frame.pack(expand=True, fill="both")

        icon_label = tk.Label(
            title_frame,
            text="üìà",
            font=("Arial", 24),
            bg="#1E3A8A",
            fg="white"
        )
        icon_label.pack(side="left", padx=(20, 10), pady=20)

        title_label = tk.Label(
            title_frame,
            text="POLYNOMIAL EQUATION MODE v2.1",
            font=("Arial", 18, "bold"),
            bg="#1E3A8A",
            fg="white"
        )
        title_label.pack(side="left", pady=20)

        # Service status trong header
        service_status = "Service: ‚úÖ Ready" if self.polynomial_service else "Service: ‚ö†Ô∏è Error"
        config_status = "Config: ‚úÖ Loaded" if self.config else "Config: ‚ö†Ô∏è Fallback"
        subtitle_label = tk.Label(
            title_frame,
            text=f"Gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c cao v·ªõi m√£ h√≥a ‚Ä¢ {service_status} ‚Ä¢ {config_status}",
            font=("Arial", 11),
            bg="#1E3A8A",
            fg="#B3D9FF"
        )
        subtitle_label.pack(side="right", padx=(0, 20), pady=(25, 15))

    def _create_control_panel(self, parent):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn ch√≠nh"""
        control_frame = tk.LabelFrame(
            parent,
            text="‚öôÔ∏è THI·∫æT L·∫¨P PH∆Ø∆†NG TR√åNH",
            font=("Arial", 12, "bold"),
            bg="#FFFFFF",
            fg="#1E3A8A",
            bd=2,
            relief="groove"
        )
        control_frame.pack(fill="x", pady=10)

        # D√≤ng 1: Ch·ªçn b·∫≠c ph∆∞∆°ng tr√¨nh
        row1 = tk.Frame(control_frame, bg="#FFFFFF")
        row1.pack(fill="x", padx=20, pady=15)

        tk.Label(
            row1,
            text="B·∫≠c ph∆∞∆°ng tr√¨nh:",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#333333",
            width=15
        ).pack(side="left")

        bac_menu = ttk.Combobox(
            row1,
            textvariable=self.bac_phuong_trinh_var,
            values=["2", "3", "4"],
            state="readonly",
            width=20,
            font=("Arial", 11)
        )
        bac_menu.pack(side="left", padx=10)
        bac_menu.bind("<<ComboboxSelected>>", self._on_bac_changed)

        # Th√¥ng tin v·ªÅ d·∫°ng ph∆∞∆°ng tr√¨nh
        self.equation_form_label = tk.Label(
            row1,
            text="ax¬≤ + bx + c = 0",
            font=("Arial", 11, "italic"),
            bg="#FFFFFF",
            fg="#666666"
        )
        self.equation_form_label.pack(side="left", padx=20)

        # D√≤ng 2: Ch·ªçn phi√™n b·∫£n m√°y t√≠nh
        row2 = tk.Frame(control_frame, bg="#FFFFFF")
        row2.pack(fill="x", padx=20, pady=(0, 15))

        tk.Label(
            row2,
            text="Phi√™n b·∫£n m√°y:",
            font=("Arial", 11, "bold"),
            bg="#FFFFFF",
            fg="#333333",
            width=15
        ).pack(side="left")

        phien_ban_menu = ttk.Combobox(
            row2,
            textvariable=self.phien_ban_var,
            values=self.phien_ban_list,
            state="readonly",
            width=20,
            font=("Arial", 11)
        )
        phien_ban_menu.pack(side="left", padx=10)
        phien_ban_menu.bind("<<ComboboxSelected>>", self._on_phien_ban_changed)
        
        # Th√¥ng tin config
        poly_config = self._get_polynomial_config()
        solver_method = poly_config.get('solver', {}).get('method', 'numpy') if poly_config else 'numpy'
        config_info = f"Solver: {solver_method}"
        
        tk.Label(
            row2,
            text=config_info,
            font=("Arial", 9),
            bg="#FFFFFF",
            fg="#666666"
        ).pack(side="right", padx=20)
    
    def _create_quick_actions(self, parent):
        """T·∫°o thanh h√†nh ƒë·ªông nhanh"""
        quick_frame = tk.Frame(parent, bg="#F0F8FF")
        quick_frame.pack(fill="x", pady=5)
        
        tk.Button(quick_frame, text="üìù T·∫°o Template", 
                 command=self._create_template,
                 bg="#1565C0", fg="white", font=("Arial", 9, "bold")).pack(side="left", padx=2)
        tk.Button(quick_frame, text="üìÅ Import Excel", 
                 command=self._import_excel,
                 bg="#FF9800", fg="white", font=("Arial", 9, "bold")).pack(side="left", padx=2)

    def _create_guide_section(self, parent):
        """T·∫°o section h∆∞·ªõng d·∫´n"""
        guide_frame = tk.LabelFrame(
            parent,
            text="üí° H∆Ø·ªöNG D·∫™N NH·∫¨P LI·ªÜU",
            font=("Arial", 10, "bold"),
            bg="#E8F4FD",
            fg="#1565C0",
            bd=1
        )
        guide_frame.pack(fill="x", pady=5)

        guide_text = (
            "‚Ä¢ Nh·∫≠p h·ªá s·ªë theo th·ª© t·ª± t·ª´ cao ƒë·∫øn th·∫•p (a, b, c cho b·∫≠c 2)\n"
            "‚Ä¢ H·ªó tr·ª£ bi·ªÉu th·ª©c: sqrt(5), sin(pi/2), 1/2, 2^3, log(10)\n"
            "‚Ä¢ √î tr·ªëng s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅn s·ªë 0\n"
            "‚Ä¢ Ph∆∞∆°ng tr√¨nh d·∫°ng: ax^n + bx^(n-1) + ... + k = 0"
        )

        guide_label = tk.Label(
            guide_frame,
            text=guide_text,
            font=("Arial", 9),
            bg="#E8F4FD",
            fg="#333333",
            justify="left"
        )
        guide_label.pack(padx=15, pady=10)

    def _create_input_section(self, parent):
        """T·∫°o section nh·∫≠p h·ªá s·ªë"""
        self.input_frame = tk.LabelFrame(
            parent,
            text="üìù NH·∫¨P H·ªÜ S·ªê PH∆Ø∆†NG TR√åNH",
            font=("Arial", 12, "bold"),
            bg="#FFFFFF",
            fg="#1E3A8A",
            bd=2,
            relief="groove"
        )
        self.input_frame.pack(fill="x", pady=10)

    def _create_roots_section(self, parent):
        """T·∫°o section k·∫øt qu·∫£ nghi·ªám"""
        self.roots_frame = tk.LabelFrame(
            parent,
            text="üéØ NGHI·ªÜM PH∆Ø∆†NG TR√åNH",
            font=("Arial", 12, "bold"),
            bg="#FFFFFF",
            fg="#D35400",
            bd=2,
            relief="groove"
        )
        self.roots_frame.pack(fill="x", pady=10)

        # Container cho text v√† scrollbar
        text_container = tk.Frame(self.roots_frame, bg="#FFFFFF")
        text_container.pack(fill="x", padx=15, pady=12)

        self.roots_text = tk.Text(
            text_container,
            width=80,
            height=8,
            font=("Courier New", 10),
            wrap=tk.WORD,
            bg="#FFF9E6",
            fg="#D35400"
        )
        self.roots_text.pack(side="left", fill="both", expand=True)

        # Scrollbar cho roots text
        scrollbar_roots = tk.Scrollbar(text_container, orient="vertical", command=self.roots_text.yview)
        scrollbar_roots.pack(side="right", fill="y")
        self.roots_text.config(yscrollcommand=scrollbar_roots.set)
        
        self.roots_text.insert("1.0", "Ch∆∞a c√≥ nghi·ªám ƒë∆∞·ª£c t√≠nh")

    def _create_final_result_section(self, parent):
        """T·∫°o section k·∫øt qu·∫£ t·ªïng"""
        self.final_frame = tk.LabelFrame(
            parent,
            text="üì¶ K·∫æT QU·∫¢ T·ªîNG (CHO M√ÅY T√çNH)",
            font=("Arial", 12, "bold"),
            bg="#FFFFFF",
            fg="#2E7D32",
            bd=2,
            relief="groove"
        )
        self.final_frame.pack(fill="x", pady=10)

        self.final_result_text = tk.Text(
            self.final_frame,
            width=80,
            height=3,
            font=("Courier New", 9, "bold"),
            wrap=tk.WORD,
            bg="#F1F8E9",
            fg="#2E7D32"
        )
        self.final_result_text.pack(padx=15, pady=12, fill="x")
        
        # Hi·ªÉn th·ªã th√¥ng tin service status
        service_status = "Service Ready" if self.polynomial_service else "Service Failed"
        config_info = "Config loaded" if self.config else "Fallback config"
        self.final_result_text.insert("1.0", f"Polynomial Mode v2.1 - {service_status} | {config_info}")

    def _create_control_buttons(self, parent):
        """T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn"""
        # Copy button (initially hidden)
        self.btn_copy_result = tk.Button(
            parent, text="üìã Copy K·∫øt Qu·∫£", 
            command=self._copy_result,
            bg="#9C27B0", fg="white", font=("Arial", 9, "bold"), width=20
        )
        self.btn_copy_result.pack(pady=5)
        self.btn_copy_result.pack_forget()  # Hide initially
        
        # Main button frame
        button_frame = tk.Frame(parent, bg="#F0F8FF")
        button_frame.pack(fill="x", pady=20)

        # N√∫t X·ª≠ l√Ω
        self.btn_process = tk.Button(
            button_frame,
            text="üöÄ Gi·∫£i & M√£ h√≥a",
            bg="#2196F3",
            fg="white",
            font=("Arial", 10, "bold"),
            width=15,
            height=2,
            command=self._process_polynomial
        )
        self.btn_process.pack(side="left", padx=10)

        # N√∫t Export
        self.btn_export = tk.Button(
            button_frame,
            text="üíæ Export Excel",
            bg="#4CAF50",
            fg="white",
            font=("Arial", 10, "bold"),
            width=15,
            height=2,
            command=self._export_excel
        )
        self.btn_export.pack(side="left", padx=10)

        # N√∫t Reset
        self.btn_reset = tk.Button(
            button_frame,
            text="üîÑ Reset",
            bg="#607D8B",
            fg="white",
            font=("Arial", 10, "bold"),
            width=12,
            height=2,
            command=self._reset_all
        )
        self.btn_reset.pack(side="left", padx=10)

        # N√∫t ƒê√≥ng
        self.btn_close = tk.Button(
            button_frame,
            text="‚ùå ƒê√≥ng",
            bg="#F44336",
            fg="white",
            font=("Arial", 10, "bold"),
            width=12,
            height=2,
            command=self.window.destroy
        )
        self.btn_close.pack(side="right", padx=10)

    def _create_status_bar(self, parent):
        """T·∫°o thanh tr·∫°ng th√°i"""
        self.status_label = tk.Label(
            parent,
            text="üü¢ S·∫µn s√†ng nh·∫≠p li·ªáu ph∆∞∆°ng tr√¨nh b·∫≠c 2",
            font=("Arial", 10, "bold"),
            bg="#F0F8FF",
            fg="#2E7D32",
            relief="sunken",
            bd=1,
            anchor="w"
        )
        self.status_label.pack(fill="x", pady=(10, 0))

        # Footer
        footer_label = tk.Label(
            parent,
            text="Polynomial Mode v2.1 ‚Ä¢ H·ªó tr·ª£ gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c cao ‚Ä¢ M√£ h√≥a t·ª± ƒë·ªông ‚Ä¢ Config-driven",
            font=("Arial", 8),
            bg="#F0F8FF",
            fg="#666666"
        )
        footer_label.pack(pady=5)

    # ========== EVENT HANDLERS ==========
    def _on_bac_changed(self, event=None):
        """X·ª≠ l√Ω khi thay ƒë·ªïi b·∫≠c ph∆∞∆°ng tr√¨nh"""
        try:
            bac = int(self.bac_phuong_trinh_var.get())

            # C·∫≠p nh·∫≠t d·∫°ng ph∆∞∆°ng tr√¨nh
            forms = {
                2: "ax¬≤ + bx + c = 0",
                3: "ax¬≥ + bx¬≤ + cx + d = 0",
                4: "ax‚Å¥ + bx¬≥ + cx¬≤ + dx + e = 0"
            }
            self.equation_form_label.config(text=forms[bac])

            # C·∫≠p nh·∫≠t service
            if self.polynomial_service:
                self.polynomial_service.set_degree(bac)

            # C·∫≠p nh·∫≠t input fields
            self._update_input_fields()
            
            # Reset state
            self.has_result = False
            self._hide_copy_button()

            # C·∫≠p nh·∫≠t status
            self.status_label.config(text=f"ƒê√£ ch·ªçn ph∆∞∆°ng tr√¨nh b·∫≠c {bac}", fg="#2E7D32")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªïi b·∫≠c ph∆∞∆°ng tr√¨nh: {e}")

    def _on_phien_ban_changed(self, event=None):
        """X·ª≠ l√Ω khi thay ƒë·ªïi phi√™n b·∫£n"""
        try:
            phien_ban = self.phien_ban_var.get()
            
            # C·∫≠p nh·∫≠t service
            if self.polynomial_service:
                self.polynomial_service.set_version(phien_ban)
            
            # L·∫•y th√™m th√¥ng tin t·ª´ config n·∫øu c√≥
            poly_config = self._get_polynomial_config()
            precision = poly_config.get('solver', {}).get('precision', 6) if poly_config else 6
            
            self.status_label.config(text=f"ƒê√£ ch·ªçn phi√™n b·∫£n: {phien_ban} (precision: {precision})")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªïi phi√™n b·∫£n: {e}")

    # ========== INPUT MANAGEMENT ==========
    def _setup_input_bindings(self):
        """Setup bindings for input change detection"""
        for entry in self.coefficient_entries:
            if hasattr(entry, 'bind'):
                entry.bind('<KeyRelease>', self._on_manual_input)

    def _on_manual_input(self, event=None):
        """X·ª≠ l√Ω khi nh·∫≠p li·ªáu th·ªß c√¥ng"""
        if self.is_imported_mode:
            messagebox.showerror("L·ªói", "ƒê√£ ·ªü ch·∫ø ƒë·ªô import, kh√¥ng th·ªÉ nh·∫≠p th·ªß c√¥ng!")
            if event and hasattr(event, 'widget'):
                event.widget.delete(0, tk.END)
            return

        has_data = self._check_manual_data()
        
        if has_data and not self.manual_data_entered:
            self.manual_data_entered = True
            self.status_label.config(text="‚úèÔ∏è ƒêang nh·∫≠p li·ªáu th·ªß c√¥ng...", fg="#FF9800")
        elif not has_data and self.manual_data_entered:
            self.manual_data_entered = False
            bac = self.bac_phuong_trinh_var.get()
            self.status_label.config(text=f"üü¢ S·∫µn s√†ng nh·∫≠p li·ªáu ph∆∞∆°ng tr√¨nh b·∫≠c {bac}", fg="#2E7D32")

    def _check_manual_data(self):
        """Ki·ªÉm tra xem ƒë√£ nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng ch∆∞a"""
        for entry in self.coefficient_entries:
            try:
                if entry.get().strip():
                    return True
            except Exception:
                pass
        return False

    def _update_input_fields(self):
        """C·∫≠p nh·∫≠t c√°c √¥ nh·∫≠p li·ªáu theo b·∫≠c ph∆∞∆°ng tr√¨nh"""
        try:
            bac = int(self.bac_phuong_trinh_var.get())

            # X√≥a widgets c≈©
            for widget in self.input_frame.winfo_children():
                widget.destroy()

            self.coefficient_entries = []

            # T·∫°o input fields m·ªõi
            self._create_coefficient_inputs(bac)
            
            # Reset bindings
            self.window.after(100, self._setup_input_bindings)

        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t input fields: {e}")

    def _create_coefficient_inputs(self, bac):
        """T·∫°o c√°c √¥ nh·∫≠p h·ªá s·ªë"""
        # Header
        tk.Label(
            self.input_frame,
            text=f"Nh·∫≠p {bac + 1} h·ªá s·ªë cho ph∆∞∆°ng tr√¨nh b·∫≠c {bac}:",
            font=("Arial", 10, "bold"),
            bg="#FFFFFF",
            fg="#333333"
        ).pack(anchor="w", padx=20, pady=10)

        # Container cho inputs
        input_container = tk.Frame(self.input_frame, bg="#FFFFFF")
        input_container.pack(fill="x", padx=20, pady=10)

        # Labels v√† entries theo b·∫≠c
        labels = self._get_coefficient_labels(bac)

        for i, (label, var_name) in enumerate(labels):
            row_frame = tk.Frame(input_container, bg="#FFFFFF")
            row_frame.pack(fill="x", pady=5)

            # Label h·ªá s·ªë
            coef_label = tk.Label(
                row_frame,
                text=label,
                font=("Arial", 10, "bold"),
                bg="#FFFFFF",
                fg="#1E3A8A",
                width=20,
                anchor="w"
            )
            coef_label.pack(side="left")

            # Entry
            entry = tk.Entry(
                row_frame,
                width=30,
                font=("Arial", 10),
                relief="groove",
                bd=2
            )
            entry.pack(side="left", padx=10)
            entry.bind('<KeyRelease>', self._on_manual_input)

            # Placeholder text
            placeholder = tk.Label(
                row_frame,
                text=f"(h·ªá s·ªë {var_name})",
                font=("Arial", 9, "italic"),
                bg="#FFFFFF",
                fg="#666666"
            )
            placeholder.pack(side="left", padx=10)

            self.coefficient_entries.append(entry)

    def _get_coefficient_labels(self, bac):
        """L·∫•y labels cho h·ªá s·ªë theo b·∫≠c"""
        labels_config = {
            2: [("H·ªá s·ªë a (x¬≤):", "a"), ("H·ªá s·ªë b (x):", "b"), ("H·ªá s·ªë c (h·∫±ng s·ªë):", "c")],
            3: [("H·ªá s·ªë a (x¬≥):", "a"), ("H·ªá s·ªë b (x¬≤):", "b"), ("H·ªá s·ªë c (x):", "c"), ("H·ªá s·ªë d (h·∫±ng s·ªë):", "d")],
            4: [("H·ªá s·ªë a (x‚Å¥):", "a"), ("H·ªá s·ªë b (x¬≥):", "b"), ("H·ªá s·ªë c (x¬≤):", "c"), ("H·ªá s·ªë d (x):", "d"),
                ("H·ªá s·ªë e (h·∫±ng s·ªë):", "e")]
        }
        return labels_config.get(bac, labels_config[2])

    # ========== BUTTON VISIBILITY ==========
    def _update_button_visibility(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t"""
        # Logic hi·ªÉn th·ªã n√∫t theo tr·∫°ng th√°i
        pass
    
    def _show_copy_button(self):
        """Hi·ªÉn th·ªã n√∫t copy khi c√≥ k·∫øt qu·∫£"""
        self.btn_copy_result.pack(pady=5, before=self.btn_process.master)
    
    def _hide_copy_button(self):
        """Gi·∫•u n√∫t copy"""
        self.btn_copy_result.pack_forget()

    # ========== PROCESSING METHODS ==========
    def _process_polynomial(self):
        """X·ª≠ l√Ω gi·∫£i ph∆∞∆°ng tr√¨nh polynomial"""
        try:
            if not self.polynomial_service:
                messagebox.showerror("L·ªói", "PolynomialService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                return

            # L·∫•y d·ªØ li·ªáu ƒë·∫ßu v√†o
            coefficient_inputs = [entry.get().strip() for entry in self.coefficient_entries]
            
            # Ki·ªÉm tra input
            is_valid, validation_msg = self.polynomial_service.validate_input(coefficient_inputs)
            if not is_valid:
                messagebox.showwarning("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", validation_msg)
                return

            # C·∫≠p nh·∫≠t status
            self.status_label.config(text="üîÑ ƒêang gi·∫£i ph∆∞∆°ng tr√¨nh...", fg="#FF9800")
            self.window.update()

            # X·ª≠ l√Ω
            success, status_msg, roots_display, final_keylog = self.polynomial_service.process_complete_workflow(coefficient_inputs)

            if success:
                # Hi·ªÉn th·ªã nghi·ªám
                self.roots_text.config(state='normal')
                self.roots_text.delete("1.0", tk.END)
                self.roots_text.insert("1.0", roots_display)
                self.roots_text.config(bg="#E8F5E8", fg="#2E7D32", state='disabled')

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi
                self._show_final_result(final_keylog)

                # C·∫≠p nh·∫≠t state
                self.has_result = True
                self._show_copy_button()
                self.status_label.config(text="‚úÖ Gi·∫£i ph∆∞∆°ng tr√¨nh th√†nh c√¥ng!", fg="#2E7D32")

            else:
                messagebox.showerror("L·ªói X·ª≠ l√Ω", status_msg)
                self.status_label.config(text=f"‚ùå {status_msg}", fg="#F44336")

        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω polynomial: {str(e)}")
            self.status_label.config(text="‚ùå L·ªói x·ª≠ l√Ω", fg="#F44336")
    
    def _show_final_result(self, keylog: str):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi v·ªõi font ƒë·∫∑c bi·ªát"""
        self.final_result_text.config(state='normal')
        self.final_result_text.delete("1.0", tk.END)
        self.final_result_text.insert("1.0", keylog)
        
        # Try special font for calculator display
        try:
            self.final_result_text.config(font=("Flexio Fx799VN", 11, "bold"), fg="#000000", bg="#E8F5E8")
        except Exception:
            self.final_result_text.config(font=("Courier New", 11, "bold"), fg="#000000", bg="#E8F5E8")
        
        self.final_result_text.config(state='disabled')

    def _copy_result(self):
        """Copy k·∫øt qu·∫£ v√†o clipboard"""
        try:
            if not self.has_result:
                messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ k·∫øt qu·∫£ ƒë·ªÉ copy!")
                return
            
            result_text = self.final_result_text.get("1.0", tk.END).strip()
            if result_text:
                self.window.clipboard_clear()
                self.window.clipboard_append(result_text)
                messagebox.showinfo("ƒê√£ copy", f"ƒê√£ copy k·∫øt qu·∫£ Polynomial v√†o clipboard:\n\n{result_text}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ copy!")
                
        except Exception as e:
            messagebox.showerror("L·ªói Copy", f"L·ªói copy k·∫øt qu·∫£: {str(e)}")

    # ========== EXCEL METHODS ==========
    def _create_template(self):
        """T·∫°o Excel template cho polynomial"""
        try:
            degree = int(self.bac_phuong_trinh_var.get())
            
            default_name = f"polynomial_template_degree_{degree}.xlsx"
            path = filedialog.asksaveasfilename(
                defaultextension=".xlsx", 
                filetypes=[("Excel files", "*.xlsx")], 
                initialfile=default_name,
                title=f"T·∫°o Template cho Ph∆∞∆°ng tr√¨nh B·∫≠c {degree}"
            )
            if not path:
                return
                
            success = PolynomialTemplateGenerator.create_template(degree, path)
            
            if success:
                messagebox.showinfo(
                    "Th√†nh c√¥ng", 
                    f"ƒê√£ t·∫°o template b·∫≠c {degree}:\n{path}\n\n"
                    f"Template g·ªìm 3 sheet:\n"
                    f"‚Ä¢ Input: Nh·∫≠p d·ªØ li·ªáu\n"
                    f"‚Ä¢ Examples: V√≠ d·ª• m·∫´u\n"
                    f"‚Ä¢ Instructions: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
                )
            else:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o template: Unknown error")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o template: {e}")

    def _import_excel(self):
        """Import file Excel"""
        messagebox.showinfo("Import Excel", "Ch·ª©c nƒÉng Import Excel cho Polynomial Mode s·∫Ω ƒë∆∞·ª£c b·ªï sung trong phi√™n b·∫£n ti·∫øp theo.\n\nHi·ªán t·∫°i vui l√≤ng s·ª≠ d·ª•ng 'T·∫°o Template' ƒë·ªÉ t·∫°o file Excel m·∫´u.")
    
    def _export_excel(self):
        """Export k·∫øt qu·∫£ ra Excel"""
        try:
            if not self.has_result or not self.polynomial_service:
                messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ k·∫øt qu·∫£ ƒë·ªÉ xu·∫•t!\n\nVui l√≤ng gi·∫£i ph∆∞∆°ng tr√¨nh tr∆∞·ªõc.")
                return
            
            default_name = f"polynomial_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="Xu·∫•t k·∫øt qu·∫£ Polynomial ra Excel", 
                defaultextension=".xlsx", 
                filetypes=[("Excel files", "*.xlsx")], 
                initialfile=default_name
            )
            
            if not output_path:
                return
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu xu·∫•t
            import pandas as pd
            
            input_data = [entry.get() for entry in self.coefficient_entries]
            roots_text = self.roots_text.get("1.0", tk.END).strip()
            final_result = self.final_result_text.get("1.0", tk.END).strip()
            polynomial_info = self.polynomial_service.get_polynomial_info()
            
            export_data = {
                'Polynomial_Degree': [self.bac_phuong_trinh_var.get()],
                'Calculator_Version': [self.phien_ban_var.get()],
                'Polynomial_Form': [self.polynomial_service.get_polynomial_form_display()],
                'Input_Coefficients': [' | '.join(input_data)],
                'Encoded_Coefficients': [' | '.join(self.polynomial_service.get_last_encoded_coefficients())],
                'Roots_Solution': [roots_text.replace('\n', ' | ')],
                'Final_Keylog': [final_result],
                'Solver_Method': [polynomial_info.get('solver_method', 'unknown')],
                'Real_Roots_Count': [len(self.polynomial_service.get_real_roots_only())],
                'Export_Time': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')]
            }
            
            pd.DataFrame(export_data).to_excel(output_path, index=False, sheet_name='Polynomial_Results')
            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"K·∫øt qu·∫£ Polynomial Mode ƒë√£ xu·∫•t t·∫°i:\n{output_path}")
            
        except Exception as e:
            messagebox.showerror("L·ªói Xu·∫•t", f"L·ªói xu·∫•t Excel: {str(e)}")

    def _reset_all(self):
        """Reset t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            # Clear all entries
            for entry in self.coefficient_entries:
                entry.delete(0, tk.END)

            # Clear text areas
            self.roots_text.config(state='normal')
            self.roots_text.delete("1.0", tk.END)
            self.roots_text.insert("1.0", "Ch∆∞a c√≥ nghi·ªám ƒë∆∞·ª£c t√≠nh")
            self.roots_text.config(bg="#FFF9E6", fg="#D35400", state='disabled')

            self.final_result_text.config(state='normal')
            self.final_result_text.delete("1.0", tk.END)
            service_status = "Service Ready" if self.polynomial_service else "Service Failed"
            config_info = "Config loaded" if self.config else "Fallback config"
            self.final_result_text.insert("1.0", f"Polynomial Mode v2.1 - {service_status} | {config_info}")
            self.final_result_text.config(bg="#F1F8E9", font=("Courier New", 9), state='disabled')
            
            # Reset state
            self.manual_data_entered = False
            self.has_result = False
            self.is_imported_mode = False
            
            # Hide copy button
            self._hide_copy_button()
            
            # Reset service state
            if self.polynomial_service:
                self.polynomial_service.reset_state()

            # Reset status
            bac = self.bac_phuong_trinh_var.get()
            self.status_label.config(text=f"üîÑ ƒê√£ reset - S·∫µn s√†ng nh·∫≠p ph∆∞∆°ng tr√¨nh b·∫≠c {bac}", fg="#2E7D32")
            
        except Exception as e:
            messagebox.showerror("L·ªói Reset", f"L·ªói khi reset: {str(e)}")


if __name__ == "__main__":
    root = tk.Tk()
    app = PolynomialEquationView(root)
    root.mainloop()
