"""Refactored Equation View - Modular Architecture"""
import tkinter as tk
from tkinter import ttk, messagebox

# Import c√°c component modules
from views.equation.equation_input_handler import EquationInputHandler
from views.equation.equation_result_handler import EquationResultHandler  
from views.equation.equation_ui_manager import EquationUIManager
from views.equation.equation_button_manager import EquationButtonManager
from views.equation.equation_config_manager import EquationConfigManager

class EquationView:
    """Main Equation View - S·ª≠ d·ª•ng c√°c component modules"""
    
    def __init__(self, window, config=None):
        self.window = window
        self.window.title("Equation Mode - Gi·∫£i H·ªá Ph∆∞∆°ng Tr√¨nh Th·ª±c")
        self.window.geometry("850x1050")
        self.window.configure(bg="#F5F5F5")

        # L∆∞u config ƒë∆∞·ª£c truy·ªÅn v√†o
        self.config = config or {}
        
        # Kh·ªüi t·∫°o c√°c bi·∫øn tr·∫°ng th√°i
        self._initialize_variables()
        
        # Kh·ªüi t·∫°o c√°c component managers
        self._initialize_components()
        
        # Thi·∫øt l·∫≠p giao di·ªán
        self._setup_ui()
        
        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã ban ƒë·∫ßu
        self._update_input_fields()
        self._update_button_visibility()
    
    def _initialize_variables(self):
        """Kh·ªüi t·∫°o c√°c bi·∫øn tr·∫°ng th√°i"""
        # Bi·∫øn giao di·ªán
        self.so_an_var = tk.StringVar(value="2")
        self.phien_ban_var = tk.StringVar()
        
        # Tr·∫°ng th√°i hi·ªán t·∫°i
        self.is_imported_mode = False
        self.has_manual_data = False
        
        # Tham chi·∫øu ƒë·∫øn c√°c widget ch√≠nh
        self.input_frame = None
        self.result_frame = None
        self.solution_entry = None
        self.final_entry = None
        self.status_label = None
    
    def _initialize_components(self):
        """Kh·ªüi t·∫°o c√°c component managers"""
        # Config manager
        self.config_manager = EquationConfigManager(self.config)
        
        # L·∫•y danh s√°ch phi√™n b·∫£n v√† thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh
        self.phien_ban_list = self.config_manager.get_available_versions()
        self.phien_ban_var.set(self.phien_ban_list[0] if self.phien_ban_list else "fx799")
        
        # UI manager
        self.ui_manager = EquationUIManager(self)
        
        # Input handler
        self.input_handler = EquationInputHandler(self)
        
        # Result handler
        self.result_handler = EquationResultHandler(self)
        
        # Button manager
        self.button_manager = EquationButtonManager(self)
    
    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # S·ª≠ d·ª•ng UI manager ƒë·ªÉ t·∫°o layout
        ui_components = self.ui_manager.setup_main_layout()
        
        # L∆∞u tham chi·∫øu ƒë·∫øn c√°c frame ch√≠nh
        self.input_frame = ui_components['input_frame']
        self.result_frame = ui_components['result_frame']
        self.status_label = ui_components['status_label']
        
        # Thi·∫øt l·∫≠p c√°c frame ƒë·∫∑c bi·ªát
        _, self.solution_entry = self.ui_manager._create_solution_frame(ui_components['main_frame'])
        _, self.final_entry = self.ui_manager._create_final_frame(ui_components['main_frame'])
        
        # T·∫°o c√°c n√∫t ch·ª©c nƒÉng
        button_frame = ui_components['button_frame']
        self.button_manager.create_buttons(button_frame)
    
    def _update_input_fields(self):
        """C·∫≠p nh·∫≠t c√°c √¥ nh·∫≠p li·ªáu v√† k·∫øt qu·∫£ d·ª±a tr√™n s·ªë ·∫©n"""
        try:
            so_an = int(self.so_an_var.get())
            
            # C·∫≠p nh·∫≠t √¥ nh·∫≠p li·ªáu
            if self.input_handler and self.input_frame:
                self.input_handler.create_input_fields(self.input_frame, so_an)
            
            # C·∫≠p nh·∫≠t grid k·∫øt qu·∫£
            if self.result_handler and self.result_frame:
                self.result_handler.create_result_grid(self.result_frame, so_an)
        
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t √¥ nh·∫≠p li·ªáu: {e}")
    
    def _update_button_visibility(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t"""
        if self.button_manager:
            self.button_manager.update_button_visibility()
    
    # ========== EVENT HANDLERS ==========
    def _on_so_an_changed(self, event=None):
        """C·∫≠p nh·∫≠t s·ªë √¥ nh·∫≠p li·ªáu khi s·ªë ·∫©n thay ƒë·ªïi"""
        self._update_input_fields()
        if self.status_label:
            self.status_label.config(
                text=f"ƒê√£ ch·ªçn h·ªá {self.so_an_var.get()} ph∆∞∆°ng tr√¨nh {self.so_an_var.get()} ·∫©n"
            )
    
    def _on_phien_ban_changed(self, event=None):
        """C·∫≠p nh·∫≠t khi phi√™n b·∫£n thay ƒë·ªïi"""
        selected_version = self.phien_ban_var.get()
        
        # L·∫•y prefix t·ª´ config n·∫øu c√≥
        prefixes = self.config_manager.get_equation_prefixes()
        prefix_info = ""
        if prefixes and selected_version in prefixes:
            prefix_info = f" - Prefix: {prefixes[selected_version]['base_prefix']}"
        
        if self.status_label:
            self.status_label.config(text=f"ƒê√£ ch·ªçn phi√™n b·∫£n: {selected_version}{prefix_info}")
    
    def _on_manual_input(self, event=None):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu th·ªß c√¥ng"""
        self.has_manual_data = True
        self.is_imported_mode = False
        self._update_button_visibility()
    
    # ========== PUBLIC METHODS FOR FUTURE INTEGRATION ==========
    def get_current_equations(self):
        """L·∫•y d·ªØ li·ªáu ph∆∞∆°ng tr√¨nh hi·ªán t·∫°i"""
        if self.input_handler:
            return self.input_handler.get_input_data()
        return []
    
    def set_equations(self, equation_data):
        """Thi·∫øt l·∫≠p d·ªØ li·ªáu ph∆∞∆°ng tr√¨nh"""
        if self.input_handler:
            self.input_handler.set_inputs(equation_data)
    
    def get_encoded_results(self):
        """L·∫•y k·∫øt qu·∫£ m√£ h√≥a hi·ªán t·∫°i"""
        if self.result_handler:
            return self.result_handler.get_encoded_string()
        return ""
    
    def set_results(self, encoded_results, solutions=None, final_encoded=None):
        """Thi·∫øt l·∫≠p k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß"""
        if self.result_handler:
            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ m√£ h√≥a
            self.result_handler.update_results(encoded_results)
            
            # C·∫≠p nh·∫≠t nghi·ªám n·∫øu c√≥
            if solutions and self.solution_entry:
                self.result_handler.update_solution_display(self.solution_entry, solutions)
            
            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng n·∫øu c√≥
            if final_encoded and self.final_entry:
                self.result_handler.update_final_result(
                    self.final_entry, final_encoded,
                    {"version": self.phien_ban_var.get()}
                )
    
    def reset_view(self):
        """Reset to√†n b·ªô view v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        # Reset tr·∫°ng th√°i
        self.is_imported_mode = False
        self.has_manual_data = False
        
        # X√≥a d·ªØ li·ªáu nh·∫≠p
        if self.input_handler:
            self.input_handler.clear_inputs()
            self.input_handler.unlock_inputs()
        
        # X√≥a k·∫øt qu·∫£
        if self.result_handler:
            self.result_handler.clear_results()
        
        # Reset hi·ªÉn th·ªã k·∫øt qu·∫£
        if self.solution_entry:
            self.solution_entry.config(state='normal')
            self.solution_entry.delete(0, tk.END)
            self.solution_entry.insert(0, "Ch∆∞a c√≥ k·∫øt qu·∫£ nghi·ªám")
            self.solution_entry.config(bg="#FFF9E6", fg="#FF6F00", state='readonly')
        
        if self.final_entry:
            self.final_entry.config(state='normal')
            self.final_entry.delete(0, tk.END)
            config_info = "Config loaded successfully" if self.config else "Using fallback config"
            self.final_entry.insert(0, f"Equation Mode v2.0 - {config_info}")
            self.final_entry.config(bg="#F1F8E9", state='readonly')
        
        # C·∫≠p nh·∫≠t n√∫t v√† tr·∫°ng th√°i
        self._update_button_visibility()
        if self.status_label:
            self.status_label.config(
                text="üü¢ S·∫µn s√†ng nh·∫≠p li·ªáu v√† gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh",
                fg="#2E7D32"
            )
    
    # ========== LEGACY COMPATIBILITY METHODS ==========
    def _placeholder_action(self):
        """H√†nh ƒë·ªông placeholder cho backward compatibility"""
        messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn. Ch·ªâ l√† giao di·ªán v2.0!")


if __name__ == "__main__":
    root = tk.Tk()
    app = EquationView(root)
    root.mainloop()