"""Equation View Components - Button Manager"""
import tkinter as tk
from tkinter import messagebox

class EquationButtonManager:
    """Qu·∫£n l√Ω c√°c n√∫t ch·ª©c nƒÉng v√† tr·∫°ng th√°i"""
    
    def __init__(self, parent_view):
        self.parent = parent_view
        self.buttons = {}
    
    def create_buttons(self, button_frame):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng"""
        # N√∫t Import Excel (ban ƒë·∫ßu hi·ªÉn th·ªã)
        self.buttons['import'] = tk.Button(
            button_frame,
            text="üìÅ Import Excel",
            bg="#FF9800",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._import_excel
        )
        self.buttons['import'].pack(side="left", padx=5)
        
        # N√∫t X·ª≠ l√Ω (lu√¥n hi·ªÉn th·ªã)
        self.buttons['process'] = tk.Button(
            button_frame,
            text="üîÑ X·ª≠ l√Ω & Gi·∫£i nghi·ªám",
            bg="#2196F3",
            fg="white",
            font=("Arial", 10, "bold"),
            width=16,
            height=1,
            command=self._process_equations
        )
        self.buttons['process'].pack(side="left", padx=5)
        
        # N√∫t Import File Excel Kh√°c (ban ƒë·∫ßu ·∫©n)
        self.buttons['import_other'] = tk.Button(
            button_frame,
            text="üìÇ Import File Kh√°c",
            bg="#9C27B0",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._import_other_excel
        )
        
        # N√∫t Quay l·∫°i (ban ƒë·∫ßu ·∫©n)
        self.buttons['back'] = tk.Button(
            button_frame,
            text="‚Ü©Ô∏è Quay l·∫°i",
            bg="#607D8B",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._back_to_manual
        )
        
        # N√∫t Export Excel
        self.buttons['export'] = tk.Button(
            button_frame,
            text="üíæ Export Excel",
            bg="#4CAF50",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._export_excel
        )
        
        # N√∫t Copy K·∫øt qu·∫£
        self.buttons['copy'] = tk.Button(
            button_frame,
            text="üìã Copy K·∫øt qu·∫£",
            bg="#FF5722",
            fg="white",
            font=("Arial", 10, "bold"),
            width=14,
            height=1,
            command=self._copy_result
        )
    
    def update_button_visibility(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t d·ª±a tr√™n tr·∫°ng th√°i"""
        # ·∫®n t·∫•t c·∫£ c√°c n√∫t tr∆∞·ªõc
        for button_name, button in self.buttons.items():
            if button_name != 'process':  # N√∫t process lu√¥n hi·ªÉn th·ªã
                button.pack_forget()
        
        if self.parent.is_imported_mode:
            # Tr·∫°ng th√°i import t·ª´ Excel
            self.buttons['import_other'].pack(side="left", padx=5)
            self.buttons['back'].pack(side="left", padx=5)
            self.buttons['process'].pack(side="left", padx=5)
            self.buttons['export'].pack(side="left", padx=5)
        elif self.parent.has_manual_data:
            # Tr·∫°ng th√°i nh·∫≠p li·ªáu th·ªß c√¥ng
            self.buttons['process'].pack(side="left", padx=5)
            self.buttons['export'].pack(side="left", padx=5)
            self.buttons['copy'].pack(side="left", padx=5)
        else:
            # Tr·∫°ng th√°i ban ƒë·∫ßu
            self.buttons['import'].pack(side="left", padx=5)
            self.buttons['process'].pack(side="left", padx=5)
    
    def _import_excel(self):
        """X·ª≠ l√Ω import Excel"""
        try:
            messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng Import Excel ƒëang ph√°t tri·ªÉn!\n\nS·∫Ω t√≠ch h·ª£p v·ªõi Excel processor t∆∞∆°ng t·ª± Geometry mode.")
            
            # Placeholder logic - s·∫Ω thay th·∫ø b·∫±ng Excel service
            self.parent.is_imported_mode = True
            self.parent.has_manual_data = False
            self.update_button_visibility()
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            if hasattr(self.parent, 'status_label'):
                self.parent.status_label.config(
                    text="üìÅ ƒê√£ import d·ªØ li·ªáu t·ª´ Excel - S·∫µn s√†ng x·ª≠ l√Ω",
                    fg="#1565C0"
                )
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói import Excel: {str(e)}")
    
    def _import_other_excel(self):
        """X·ª≠ l√Ω import file Excel kh√°c"""
        self._import_excel()  # T·∫°m th·ªùi d√πng ch·ª©c nƒÉng gi·ªëng nhau
    
    def _process_equations(self):
        """X·ª≠ l√Ω gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh"""
        try:
            messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng gi·∫£i ph∆∞∆°ng tr√¨nh ƒëang ph√°t tri·ªÉn!\n\nS·∫Ω t√≠ch h·ª£p:\n- Equation Service\n- Matrix solver\n- Encoding logic")
            
            # Placeholder - hi·ªÉn th·ªã k·∫øt qu·∫£ m·∫´u
            if hasattr(self.parent, 'input_handler'):
                input_data = self.parent.input_handler.get_input_data()
                if any(data.strip() for data in input_data):
                    # Gi·∫£ l·∫≠p x·ª≠ l√Ω th√†nh c√¥ng
                    if hasattr(self.parent, 'result_handler'):
                        # K·∫øt qu·∫£ m√£ h√≥a m·∫´u
                        sample_results = ["0.5", "1.2", "3.0", "-2.1", "0.8", "4.5"]
                        self.parent.result_handler.update_results(sample_results)
                        
                        # K·∫øt qu·∫£ nghi·ªám m·∫´u
                        sample_solutions = {"x": "2.5", "y": "-1.3"}
                        if hasattr(self.parent, 'solution_entry'):
                            self.parent.result_handler.update_solution_display(
                                self.parent.solution_entry, sample_solutions
                            )
                        
                        # K·∫øt qu·∫£ t·ªïng m·∫´u
                        encoded_string = ",".join(sample_results)
                        if hasattr(self.parent, 'final_entry'):
                            self.parent.result_handler.update_final_result(
                                self.parent.final_entry, encoded_string, 
                                {"version": self.parent.phien_ban_var.get()}
                            )
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    if hasattr(self.parent, 'status_label'):
                        self.parent.status_label.config(
                            text="‚úÖ ƒê√£ gi·∫£i xong h·ªá ph∆∞∆°ng tr√¨nh - K·∫øt qu·∫£ hi·ªÉn th·ªã ph√≠a tr√™n",
                            fg="#2E7D32"
                        )
                else:
                    messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p h·ªá s·ªë ph∆∞∆°ng tr√¨nh tr∆∞·ªõc!")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω: {str(e)}")
    
    def _back_to_manual(self):
        """Quay l·∫°i ch·∫ø ƒë·ªô nh·∫≠p th·ªß c√¥ng"""
        try:
            result = messagebox.askyesno(
                "X√°c nh·∫≠n", 
                "B·∫°n c√≥ ch·∫Øc mu·ªën quay l·∫°i ch·∫ø ƒë·ªô nh·∫≠p th·ªß c√¥ng?\n\nD·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω b·ªã x√≥a."
            )
            
            if result:
                # Reset tr·∫°ng th√°i
                self.parent.is_imported_mode = False
                self.parent.has_manual_data = False
                
                # X√≥a d·ªØ li·ªáu nh·∫≠p
                if hasattr(self.parent, 'input_handler'):
                    self.parent.input_handler.clear_inputs()
                    self.parent.input_handler.unlock_inputs()
                
                # X√≥a k·∫øt qu·∫£
                if hasattr(self.parent, 'result_handler'):
                    self.parent.result_handler.clear_results()
                
                # C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t
                self.update_button_visibility()
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                if hasattr(self.parent, 'status_label'):
                    self.parent.status_label.config(
                        text="üü¢ ƒê√£ quay l·∫°i ch·∫ø ƒë·ªô nh·∫≠p th·ªß c√¥ng",
                        fg="#2E7D32"
                    )
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi quay l·∫°i: {str(e)}")
    
    def _export_excel(self):
        """Xu·∫•t k·∫øt qu·∫£ ra Excel"""
        try:
            messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng Export Excel ƒëang ph√°t tri·ªÉn!\n\nS·∫Ω xu·∫•t:\n- K·∫øt qu·∫£ m√£ h√≥a\n- Nghi·ªám ph∆∞∆°ng tr√¨nh\n- M·∫´u template")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói xu·∫•t Excel: {str(e)}")
    
    def _copy_result(self):
        """Copy k·∫øt qu·∫£ v√†o clipboard"""
        try:
            if hasattr(self.parent, 'result_handler'):
                encoded_string = self.parent.result_handler.get_encoded_string()
                if encoded_string:
                    # Copy v√†o clipboard
                    self.parent.window.clipboard_clear()
                    self.parent.window.clipboard_append(encoded_string)
                    
                    messagebox.showinfo(
                        "ƒê√£ copy", 
                        f"ƒê√£ copy k·∫øt qu·∫£ v√†o clipboard:\n\n{encoded_string[:50]}{'...' if len(encoded_string) > 50 else ''}"
                    )
                else:
                    messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ k·∫øt qu·∫£ ƒë·ªÉ copy!")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng th·ªÉ truy c·∫≠p k·∫øt qu·∫£!")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói copy k·∫øt qu·∫£: {str(e)}")
    
    def enable_button(self, button_name):
        """K√≠ch ho·∫°t n√∫t"""
        if button_name in self.buttons:
            self.buttons[button_name].config(state='normal')
    
    def disable_button(self, button_name):
        """V√¥ hi·ªáu h√≥a n√∫t"""
        if button_name in self.buttons:
            self.buttons[button_name].config(state='disabled')
    
    def get_button(self, button_name):
        """L·∫•y tham chi·∫øu ƒë·∫øn n√∫t"""
        return self.buttons.get(button_name)