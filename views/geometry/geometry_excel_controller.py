"""Geometry View Components - Excel Controller"""
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import threading
import os
from datetime import datetime

class GeometryExcelController:
    """Qu·∫£n l√Ω c√°c thao t√°c Excel"""
    
    def __init__(self, parent_view):
        self.parent = parent_view
    
    def import_excel(self):
        """Ch·ªâ ch·ªçn file v√† l∆∞u l·∫°i T√äN FILE, KH√îNG ƒë·ªçc n·ªôi dung"""
        try:
            file_path = filedialog.askopenfilename(
                title="Ch·ªçn file Excel",
                filetypes=[("Excel files", "*.xlsx *.xls")]
            )
            
            if not file_path:
                return False
            
            # Ki·ªÉm tra extension
            file_ext = os.path.splitext(file_path)[1].lower()
            if file_ext not in ['.xlsx', '.xls']:
                messagebox.showerror("L·ªói", "Ch·ªâ h·ªó tr·ª£ file Excel (.xlsx, .xls)!")
                return False
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(file_path):
                messagebox.showerror("L·ªói", "File kh√¥ng t·ªìn t·∫°i!")
                return False
            
            # C·∫≠p nh·∫≠t state manager
            file_name = os.path.basename(file_path)
            if hasattr(self.parent, 'state_manager'):
                self.parent.state_manager.set_import_mode(file_path, file_name)
            
            # C·∫≠p nh·∫≠t Excel status
            if hasattr(self.parent, 'ui_manager'):
                self.parent.ui_manager.excel_status_label.config(text=f"Excel: üìÅ {file_name[:15]}...")
            
            # C·∫≠p nh·∫≠t result display
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            status_message = f"üìÅ ƒê√£ import file: {file_name}\n"
            
            if hasattr(self.parent, 'result_display'):
                self.parent.result_display.update_result_display(status_message)
            
            return True
        
        except Exception as e:
            messagebox.showerror("L·ªói Import", f"L·ªói import Excel: {str(e)}")
            return False
    
    def process_excel_batch(self):
        """ƒê·ªçc v√† x·ª≠ l√Ω file Excel (ch·ªâ ƒë·ªçc ·ªü b∆∞·ªõc n√†y)"""
        try:
            if not hasattr(self.parent, 'state_manager') or not self.parent.state_manager.is_import_mode():
                messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a import file Excel n√†o!")
                return
            
            if not hasattr(self.parent, 'service_adapter') or not self.parent.service_adapter.is_service_ready():
                messagebox.showerror("L·ªói", "GeometryService ch∆∞a s·∫µn s√†ng!")
                return
            
            import_info = self.parent.state_manager.get_import_info()
            file_path = import_info['file_path']
            file_name = import_info['file_name']
            
            # Ki·ªÉm tra file v·∫´n t·ªìn t·∫°i
            if not os.path.exists(file_path):
                messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
                return
            
            original_name = os.path.splitext(file_name)[0]
            default_output = f"{original_name}_encoded_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="Ch·ªçn n∆°i l∆∞u k·∫øt qu·∫£",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=default_output
            )
            if not output_path:
                return
            
            # L·∫•y setting hi·ªán t·∫°i
            shape_a = self.parent.dropdown1_var.get()
            shape_b = self.parent.dropdown2_var.get() if hasattr(self.parent, 'operation_manager') and \
                     self.parent.operation_manager.needs_shape_B() else None
            operation = self.parent.pheptoan_var.get()
            dimension_a = self.parent.kich_thuoc_A_var.get()
            dimension_b = self.parent.kich_thuoc_B_var.get()
            
            # T·∫°o progress window
            progress_window = self._create_progress_window("ƒêang x·ª≠ l√Ω file Excel...")
            
            def progress_callback(progress, processed, total, errors):
                if hasattr(self, 'progress_var') and not self.parent.state_manager.processing_cancelled:
                    try:
                        self.progress_var.set(progress)
                        memory_usage = self.parent.memory_monitor.get_current_memory() if hasattr(self.parent, 'memory_monitor') else 0
                        progress_text = f"ƒêang x·ª≠ l√Ω: {processed:,}/{total:,} d√≤ng"
                        self.progress_label.config(text=progress_text)
                        progress_window.update()
                    except Exception:
                        pass
            
            def process_thread():
                try:
                    results, output_file, success_count, error_count = self.parent.service_adapter.process_excel_batch(
                        file_path, shape_a, shape_b, operation,
                        dimension_a, dimension_b, output_path, progress_callback
                    )
                    
                    if not self.parent.state_manager.processing_cancelled:
                        progress_window.destroy()
                        
                        result_message = (
                            f"üéâ Ho√†n th√†nh x·ª≠ l√Ω Excel!\n\n"
                            f"üìÅ File g·ªëc: {file_name}\n"
                            f"üìÅ Output: {os.path.basename(output_file)}\n"
                            f"‚úÖ Success: {success_count:,} rows\n"
                            f"‚ùå Errors: {error_count:,} rows\n"
                            f"üíæ Peak memory: {self.parent.memory_monitor.get_current_memory():.1f}MB\n\n"
                        )
                        if isinstance(results, list) and len(results) > 0:
                            result_message += f"üìù Sample result:\n{results[0][:80]}..."
                        else:
                            result_message += "üìù Results written directly to file for memory efficiency"
                        
                        if hasattr(self.parent, 'result_display'):
                            self.parent.result_display.update_result_display(result_message)
                        
                        messagebox.showinfo("Ho√†n th√†nh", 
                            f"üéâ X·ª≠ l√Ω Excel th√†nh c√¥ng!\n\n"
                            f"‚úÖ Processed: {success_count:,} rows\n"
                            f"‚ùå Errors: {error_count:,} rows\n\n"
                            f"File ƒë√£ l∆∞u:\n{output_file}")
                
                except Exception as e:
                    if not self.parent.state_manager.processing_cancelled:
                        progress_window.destroy()
                        messagebox.showerror("L·ªói X·ª≠ l√Ω", f"L·ªói x·ª≠ l√Ω Excel: {str(e)}")
            
            # Start processing thread
            thread = threading.Thread(target=process_thread)
            thread.daemon = True
            thread.start()
        
        except Exception as e:
            messagebox.showerror("L·ªói X·ª≠ l√Ω", f"L·ªói x·ª≠ l√Ω Excel: {str(e)}")
    
    def _create_progress_window(self, title):
        """T·∫°o c·ª≠a s·ªï progress dialog"""
        progress_window = tk.Toplevel(self.parent.window)
        progress_window.title(title)
        progress_window.geometry("450x180")
        progress_window.resizable(False, False)
        progress_window.grab_set()
        progress_window.transient(self.parent.window)
        
        tk.Label(progress_window, text=title, font=("Arial", 12, "bold")).pack(pady=10)
        
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window, variable=self.progress_var, 
            maximum=100, length=350, mode='determinate'
        )
        progress_bar.pack(pady=10)
        
        self.progress_label = tk.Label(progress_window, text="Chu·∫©n b·ªã...", font=("Arial", 10))
        self.progress_label.pack(pady=5)
        
        warning_label = tk.Label(
            progress_window, 
            text="‚ö†Ô∏è ƒê·ª´ng ƒë√≥ng c·ª≠a s·ªï! ƒêang x·ª≠ l√Ω .",
            font=("Arial", 8), fg="#FF9800"
        )
        warning_label.pack(pady=5)
        
        def cancel_processing():
            self.parent.state_manager.set_processing_cancelled(True)
            messagebox.showinfo("ƒê√£ h·ªßy", "ƒê√£ y√™u c·∫ßu h·ªßy x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i...")
            progress_window.after(2000, progress_window.destroy)
        
        tk.Button(progress_window, text="üõë H·ªßy", command=cancel_processing,
                 bg="#F44336", fg="white", font=("Arial", 10)).pack(pady=10)
        
        return progress_window
    
    def create_template(self):
        """T·∫°o Excel template"""
        try:
            shape_a = self.parent.dropdown1_var.get()
            shape_b = self.parent.dropdown2_var.get() if hasattr(self.parent, 'operation_manager') and \
                     self.parent.operation_manager.needs_shape_B() else None
            
            if not shape_a:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn h√¨nh d·∫°ng tr∆∞·ªõc!")
                return
            
            template_name = f"template_{shape_a}" + (f"_{shape_b}" if shape_b else "") + f"_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            output_path = filedialog.asksaveasfilename(
                title="L∆∞u template Excel",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=template_name
            )
            
            if not output_path:
                return
            
            if hasattr(self.parent, 'service_adapter'):
                template_file = self.parent.service_adapter.create_excel_template_for_geometry(shape_a, shape_b, output_path)
                
                messagebox.showinfo("T·∫°o template th√†nh c√¥ng", 
                    f"Template Excel ƒë√£ t·∫°o t·∫°i:\n{template_file}\n\n"
                    f"B·∫°n c√≥ th·ªÉ ƒëi·ªÅn d·ªØ li·ªáu v√†o template n√†y r·ªìi import l·∫°i.\n\n"
                    f"üí° Tip: Template h·ªó tr·ª£ ƒë·∫øn 250,000 d√≤ng v·ªõi anti-crash system!")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói t·∫°o template: {str(e)}")
    
    def quit_import_mode(self):
        """Tho√°t ch·∫ø ƒë·ªô import v√† quay l·∫°i manual"""
        try:
            result = messagebox.askyesno("Tho√°t ch·∫ø ƒë·ªô import", 
                "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ch·∫ø ƒë·ªô import Excel v√† quay l·∫°i nh·∫≠p th·ªß c√¥ng?")
            
            if result:
                # Reset state
                if hasattr(self.parent, 'state_manager'):
                    self.parent.state_manager.set_manual_mode()
                
                # C·∫≠p nh·∫≠t UI
                if hasattr(self.parent, 'result_display'):
                    self.parent.result_display.show_single_line_result("")
                
                if hasattr(self.parent, 'ui_manager'):
                    self.parent.ui_manager.excel_status_label.config(text="üìä Excel: ‚úÖ Ready")
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói tho√°t ch·∫ø ƒë·ªô import: {str(e)}")